// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import promise;

import generated/plantkeeper_tables;
import plantkeeper/custom/tables;
import oauth/generated/oauth_dbstate;
import admin_panel/generated/admin_panel_dbstate;

export {
	PlantkeeperDbState(
		familiesB : DynamicBehaviour<[Family]>,
		colorTypesB : DynamicBehaviour<[ColorType]>,
		plantColorsB : DynamicBehaviour<[PlantColor]>,
		leafTypesB : DynamicBehaviour<[LeafType]>,
		carePlansB : DynamicBehaviour<[CarePlan]>,
		plantsB : DynamicBehaviour<[Plant]>
	);

	loadPlantkeeperDbState(jwt : string, onOK : (PlantkeeperDbState) -> void, onError : (string) -> void) -> void;

	makeEmptyPlantkeeperDbState() -> PlantkeeperDbState;

	buildFamilyTable(
		manager : MaterialManager,
		jwt : string, 
		plantkeeperDbState : PlantkeeperDbState, 
		style : [SubTableStyle<Family, ?>]
	) -> Material;
	
	buildColorTypeTable(
		manager : MaterialManager,
		jwt : string, 
		plantkeeperDbState : PlantkeeperDbState, 
		style : [SubTableStyle<ColorType, ?>]
	) -> Material;
	
	buildPlantColorTable(
		manager : MaterialManager,
		jwt : string, 
		plantkeeperDbState : PlantkeeperDbState, 
		style : [SubTableStyle<PlantColor, ?>]
	) -> Material;
	
	buildLeafTypeTable(
		manager : MaterialManager,
		jwt : string, 
		plantkeeperDbState : PlantkeeperDbState, 
		style : [SubTableStyle<LeafType, ?>]
	) -> Material;
	
	buildCarePlanTable(
		manager : MaterialManager,
		jwt : string, 
		plantkeeperDbState : PlantkeeperDbState, 
		style : [SubTableStyle<CarePlan, ?>]
	) -> Material;
	
	buildPlantTable(
		manager : MaterialManager,
		jwt : string, 
		plantkeeperDbState : PlantkeeperDbState, 
		style : [SubTableStyle<Plant, ?>]
	) -> Material;
}

loadPlantkeeperDbState(jwt : string, onOK : (PlantkeeperDbState) -> void, onError : (string) -> void) -> void {
	familiesPromise = 
		Promise(\fulfill, reject -> { 
			loadFamilys(jwt, fulfill, reject)
		});
	
	colorTypesPromise = 
		Promise(\fulfill, reject -> { 
			loadColorTypes(jwt, fulfill, reject)
		});
	
	plantColorsPromise = 
		Promise(\fulfill, reject -> { 
			loadPlantColors(jwt, fulfill, reject)
		});
	
	leafTypesPromise = 
		Promise(\fulfill, reject -> { 
			loadLeafTypes(jwt, fulfill, reject)
		});
	
	carePlansPromise = 
		Promise(\fulfill, reject -> { 
			loadCarePlans(jwt, fulfill, reject)
		});
	
	plantsPromise = 
		Promise(\fulfill, reject -> { 
			loadPlants(jwt, fulfill, reject)
		});
	
	promises = [familiesPromise, colorTypesPromise, plantColorsPromise, leafTypesPromise, carePlansPromise, plantsPromise];

	doneP(parallelP(promises),
		\results : flow -> { // Typing is hard. Forgive us
			PlantkeeperDbState(make(results[0]), make(results[1]), make(results[2]), make(results[3]), make(results[4]), make(results[5])) |> onOK
		},
		onError
	)

}

makeEmptyPlantkeeperDbState() -> PlantkeeperDbState {
	PlantkeeperDbState(
		make([]), 
		make([]), 
		make([]), 
		make([]), 
		make([]), 
		make([])
	);
}

buildFamilyTable(manager : MaterialManager, jwt : string, plantkeeperDbState : PlantkeeperDbState, style : [SubTableStyle<Family, ?>]) -> Material {
	FamilyTable(
		manager,
		jwt, 
		plantkeeperDbState.familiesB,
		plantkeeperDbState.plantsB,
		style
	);
}

buildColorTypeTable(manager : MaterialManager, jwt : string, plantkeeperDbState : PlantkeeperDbState, style : [SubTableStyle<ColorType, ?>]) -> Material {
	ColorTypeTable(
		manager,
		jwt, 
		plantkeeperDbState.colorTypesB,
		plantkeeperDbState.plantColorsB,
		style
	);
}

buildPlantColorTable(manager : MaterialManager, jwt : string, plantkeeperDbState : PlantkeeperDbState, style : [SubTableStyle<PlantColor, ?>]) -> Material {
	PlantColorTableCustom(
		manager,
		jwt, 
		plantkeeperDbState.plantColorsB,
		plantkeeperDbState.colorTypesB,
		plantkeeperDbState.plantsB,
		style
	);
}

buildLeafTypeTable(manager : MaterialManager, jwt : string, plantkeeperDbState : PlantkeeperDbState, style : [SubTableStyle<LeafType, ?>]) -> Material {
	LeafTypeTable(
		manager,
		jwt, 
		plantkeeperDbState.leafTypesB,
		plantkeeperDbState.plantsB,
		style
	);
}

buildCarePlanTable(manager : MaterialManager, jwt : string, plantkeeperDbState : PlantkeeperDbState, style : [SubTableStyle<CarePlan, ?>]) -> Material {
	CarePlanTable(
		manager,
		jwt, 
		plantkeeperDbState.carePlansB,
		plantkeeperDbState.plantsB,
		style
	);
}

buildPlantTable(manager : MaterialManager, jwt : string, plantkeeperDbState : PlantkeeperDbState, style : [SubTableStyle<Plant, ?>]) -> Material {
	PlantTable(
		manager,
		jwt, 
		plantkeeperDbState.plantsB,
		plantkeeperDbState.familiesB,
		plantkeeperDbState.plantColorsB,
		plantkeeperDbState.leafTypesB,
		plantkeeperDbState.carePlansB,
		style
	);
}

