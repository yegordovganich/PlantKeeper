// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import generated/plantkeeper_types;
import generated/plantkeeper_database;
import material/material;
import material/material_dialog;
import substantiate/subtable_styles;
import meta_app/utils;
import admin_panel/generated/admin_panel_tables;

export {
	FamilyTable(
			manager : MaterialManager,
			jwt : string, 
			families : DynamicBehaviour<[Family]>, 
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<Family, ?>]
		) -> Material;
	
	ColorTypeTable(
			manager : MaterialManager,
			jwt : string, 
			colorTypes : DynamicBehaviour<[ColorType]>, 
			plantColors : DynamicBehaviour<[PlantColor]>,
			style : [SubTableStyle<ColorType, ?>]
		) -> Material;
	
	PlantColorTable(
			manager : MaterialManager,
			jwt : string, 
			plantColors : DynamicBehaviour<[PlantColor]>, 
			colorTypes : DynamicBehaviour<[ColorType]>,
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<PlantColor, ?>]
		) -> Material;
	
	LeafTypeTable(
			manager : MaterialManager,
			jwt : string, 
			leafTypes : DynamicBehaviour<[LeafType]>, 
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<LeafType, ?>]
		) -> Material;
	
	CarePlanTable(
			manager : MaterialManager,
			jwt : string, 
			carePlans : DynamicBehaviour<[CarePlan]>, 
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<CarePlan, ?>]
		) -> Material;
	
	PlantTable(
			manager : MaterialManager,
			jwt : string, 
			plants : DynamicBehaviour<[Plant]>, 
			families : DynamicBehaviour<[Family]>,
			plantColors : DynamicBehaviour<[PlantColor]>,
			leafTypes : DynamicBehaviour<[LeafType]>,
			carePlans : DynamicBehaviour<[CarePlan]>,
			style : [SubTableStyle<Plant, ?>]
		) -> Material;
	
}

FamilyTable(manager : MaterialManager, jwt : string, families : DynamicBehaviour<[Family]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<Family, ?>]) -> Material {
	
	defaultFamily = extractStruct(style, SubTableDefaultValue(makeFamily));
	allowEdit = extractStruct(style, SubTableAllowEdit(true));
	onEdit = extractStruct(style, SubTableOnEdit(\__ -> true));
	onError = extractStruct(style, SubTableOnError(println));
	checkBeforeDelete = extractStruct(style, SubTableCheckBeforeDelete(\__ -> None()));
	onAddHandler = extractStruct(style, SubTableOnAdd(\__ -> {}));
	onAdd = extractStruct(style, SubTableAddEvent(\-> {onAddFamily(manager, jwt, families, defaultFamily.fn, onAddHandler.fn, onError.fn)}));
	onDelete = extractStruct(style, SubTableDeleteEvent(\item, callback -> {
		callback2 = \-> {
			index = elemIndex(getValue(families), item, -1);
			deleteFamily(jwt, item, \ok -> next(families, removeIndex(getValue(families), index)), onError.fn);
			callback();
		}
		showDeleteConfirmationDialog(manager, jwt, callback2, onError.fn);
	}));
	customIcons : [SubTableCustomIcon] = fold(style, [], \acc, s -> {
		switch(s) {
			SubTableCustomIcon(__, __, __): arrayPush(acc, s);
			default: acc;
		}
	});
	enabledColumnsB = extractStruct(style, SubTableEnableColumns(make(map(enumFromTo(1, 3), \__ -> true)))).enabledB;

	families_selectedIndex = make(-1);

	// Filters
	filtered_families = make([]);
	isInlineEdit = make(false);
	original_families_selectedIndex = families_selectedIndex;

	familiesTouch2MRow = \item : Family -> {
		[
			MText(item.name, [MDataRow]),
			MText(item.description, [MDataRow]),
		]
	};

	table = MConstruct([\ -> 
		subscribe(families, \__-> {
		if (!getValue(isInlineEdit)) nextDistinct(filtered_families, getValue(families))
		})
	], MSelect(fselect2(filtered_families, enabledColumnsB, FLift2(\f, e -> Pair(f, e))), \itemsEnabled -> {
		items = itemsEnabled.first;
		visibleColumnsIndices = filtermapi(itemsEnabled.second, \i, item -> if (item) Some(i) else None());
		MDataTable(
			filtermapi([
				MColumn(_("Name"), "", 144, [MAutoSort]),
				MColumn(_("Description"), "", 144, [MAutoSort]),
				MColumn(_(""), "", length(customIcons) * 28, []),
			], \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None()),
			map(items, \item -> filtermapi(familiesTouch2MRow(item), \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None())),
			[MSingleSelection(families_selectedIndex), MCondensed(true), MPaginationAutoScaling]
		)
	}));

	families_actions = [
		MTextButton(_("ADD"), \ -> {onAddFamily(manager, jwt, families, defaultFamily.fn, onAddHandler.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(const(true))]),
		MTextButton(_("EDIT"), \ -> {onEditFamily(manager, jwt, families, original_families_selectedIndex |> fgetValue, onEdit.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(families_selectedIndex, -1)))]),
		MTextButton(_("DELETE"), \ -> {
			filteredItemsVal = getValue(filtered_families);
			index = families_selectedIndex |> fgetValue;
			errorDeleteMsgM = checkBeforeDelete.fn(filteredItemsVal[index]);
			if (isNone(errorDeleteMsgM)) {
				itemsVal = getValue(families);
				original_index = original_families_selectedIndex |> fgetValue;
				if (index > -1 && index < length(filteredItemsVal)) {
					if (exists(getValue(plants), \r -> r.familyId == filteredItemsVal[index].id)) {
						ShowMConfirmation(
							manager,
							"",
							"OK",
							"enter",
							MText("This family is referenced in existing tables. You can't delete it", [])
						)
					} else {
						onDelete.fn(filteredItemsVal[index], \-> {
						next(families, removeIndex(itemsVal, original_index));
						next(families_selectedIndex, -1);
						});
					}
				}
			} else {
				errorDeleteMsg = either(errorDeleteMsgM, "");
				if (errorDeleteMsg != "") {
					close = make(false);
					ShowMDialog(manager, close,
						[
							MDialogTitle("Delete error"),
							MDialogUseFrame(),
							MDialogActions([
								MTextButton("CLOSE", \ -> next(close, true), [MBlue(500)], [])
							]),
						],
						MText(errorDeleteMsg, [])
					);
				}
			}
		}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(families_selectedIndex, -1)))]),
	];

	families_view = MBorder(16.0, 16.0, 0.0, 0.0, MLines([
		TFixed(0.0, 8.0),
		MCols([TFixed(24.0, 0.0),MText(_("Family"), [MTitle])]),
		TFixed(0.0, 16.0),
		table
	]));

	MLet("body", families_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()],  if (allowEdit.allow) families_actions else [TEmpty()] )),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

onAddFamily(manager : MaterialManager, jwt : string, families : DynamicBehaviour<[Family]>,  defaultFamily : () -> Family, callback : (Family) -> void, onError : (string) -> void) -> void {
	_family = defaultFamily();
	close = make(false);
	onAdd = \newFamily -> {
		insertFamily(jwt, newFamily, \id -> {
			newFamily2 = Family(id, newFamily.name, newFamily.description);
			dynArrayPush(families, newFamily2);
			callback(newFamily2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editFamilyData(manager, _family, onAdd, onCancel)
	);
}

onEditFamily(manager : MaterialManager, jwt : string, families : DynamicBehaviour<[Family]>, index : int, onEdit : (Family) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(families))) {
		close = make(false);
		onFamilyEdit = \editedFamily -> {
			if (onEdit(editedFamily)) {
	 			updateFamily(jwt, editedFamily, \ok -> {
					next(families, replace(getValue(families), index, editedFamily))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editFamilyData(manager, getValue(families)[index], onFamilyEdit, onCancel)
		);
	}
}

editFamilyData(manager : MaterialManager, _family : Family, onSave : (Family) -> void, onCancel : () -> void) -> Material {
	
	_family_name = make(_family.name);
	_family_description = make(_family.description);

	_family_actions = [
		MTextButton(_("CANCEL"), \ -> {onCancel()}, [MBlue(500)], [MShortcut("esc"), MEnabled(const(true))]),
		MTextButton(_("SAVE"), \ -> {onSave(Family(_family.id, _family_name |> fgetValue, _family_description |> fgetValue))}, [MBlue(500), MButtonRaised], [MShortcut(""), MEnabled(const(true))]),
	];

	_family_view = MBorder(16.0, 16.0, 0.0, 0.0, 
		MLines([
			MText(_("Family"), [MTitle]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("name", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_family_name, [MLabel(_("Name")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("description", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_family_description, [MLabel(_("Description")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			])
	]));

	MLet("body", _family_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()], _family_actions)),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

ColorTypeTable(manager : MaterialManager, jwt : string, colorTypes : DynamicBehaviour<[ColorType]>, plantColors : DynamicBehaviour<[PlantColor]>, style : [SubTableStyle<ColorType, ?>]) -> Material {
	
	defaultColorType = extractStruct(style, SubTableDefaultValue(makeColorType));
	allowEdit = extractStruct(style, SubTableAllowEdit(true));
	onEdit = extractStruct(style, SubTableOnEdit(\__ -> true));
	onError = extractStruct(style, SubTableOnError(println));
	checkBeforeDelete = extractStruct(style, SubTableCheckBeforeDelete(\__ -> None()));
	onAddHandler = extractStruct(style, SubTableOnAdd(\__ -> {}));
	onAdd = extractStruct(style, SubTableAddEvent(\-> {onAddColorType(manager, jwt, colorTypes, defaultColorType.fn, onAddHandler.fn, onError.fn)}));
	onDelete = extractStruct(style, SubTableDeleteEvent(\item, callback -> {
		callback2 = \-> {
			index = elemIndex(getValue(colorTypes), item, -1);
			deleteColorType(jwt, item, \ok -> next(colorTypes, removeIndex(getValue(colorTypes), index)), onError.fn);
			callback();
		}
		showDeleteConfirmationDialog(manager, jwt, callback2, onError.fn);
	}));
	customIcons : [SubTableCustomIcon] = fold(style, [], \acc, s -> {
		switch(s) {
			SubTableCustomIcon(__, __, __): arrayPush(acc, s);
			default: acc;
		}
	});
	enabledColumnsB = extractStruct(style, SubTableEnableColumns(make(map(enumFromTo(1, 2), \__ -> true)))).enabledB;

	colorTypes_selectedIndex = make(-1);

	// Filters
	filtered_colorTypes = make([]);
	isInlineEdit = make(false);
	original_colorTypes_selectedIndex = colorTypes_selectedIndex;

	colorTypesTouch2MRow = \item : ColorType -> {
		[
			MText(item.name, [MDataRow]),
		]
	};

	table = MConstruct([\ -> 
		subscribe(colorTypes, \__-> {
		if (!getValue(isInlineEdit)) nextDistinct(filtered_colorTypes, getValue(colorTypes))
		})
	], MSelect(fselect2(filtered_colorTypes, enabledColumnsB, FLift2(\f, e -> Pair(f, e))), \itemsEnabled -> {
		items = itemsEnabled.first;
		visibleColumnsIndices = filtermapi(itemsEnabled.second, \i, item -> if (item) Some(i) else None());
		MDataTable(
			filtermapi([
				MColumn(_("Name"), "", 144, [MAutoSort]),
				MColumn(_(""), "", length(customIcons) * 28, []),
			], \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None()),
			map(items, \item -> filtermapi(colorTypesTouch2MRow(item), \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None())),
			[MSingleSelection(colorTypes_selectedIndex), MCondensed(true), MPaginationAutoScaling]
		)
	}));

	colorTypes_actions = [
		MTextButton(_("ADD"), \ -> {onAddColorType(manager, jwt, colorTypes, defaultColorType.fn, onAddHandler.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(const(true))]),
		MTextButton(_("EDIT"), \ -> {onEditColorType(manager, jwt, colorTypes, original_colorTypes_selectedIndex |> fgetValue, onEdit.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(colorTypes_selectedIndex, -1)))]),
		MTextButton(_("DELETE"), \ -> {
			filteredItemsVal = getValue(filtered_colorTypes);
			index = colorTypes_selectedIndex |> fgetValue;
			errorDeleteMsgM = checkBeforeDelete.fn(filteredItemsVal[index]);
			if (isNone(errorDeleteMsgM)) {
				itemsVal = getValue(colorTypes);
				original_index = original_colorTypes_selectedIndex |> fgetValue;
				if (index > -1 && index < length(filteredItemsVal)) {
					if (exists(getValue(plantColors), \r -> r.colorTypeId == filteredItemsVal[index].id)) {
						ShowMConfirmation(
							manager,
							"",
							"OK",
							"enter",
							MText("This colorType is referenced in existing tables. You can't delete it", [])
						)
					} else {
						onDelete.fn(filteredItemsVal[index], \-> {
						next(colorTypes, removeIndex(itemsVal, original_index));
						next(colorTypes_selectedIndex, -1);
						});
					}
				}
			} else {
				errorDeleteMsg = either(errorDeleteMsgM, "");
				if (errorDeleteMsg != "") {
					close = make(false);
					ShowMDialog(manager, close,
						[
							MDialogTitle("Delete error"),
							MDialogUseFrame(),
							MDialogActions([
								MTextButton("CLOSE", \ -> next(close, true), [MBlue(500)], [])
							]),
						],
						MText(errorDeleteMsg, [])
					);
				}
			}
		}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(colorTypes_selectedIndex, -1)))]),
	];

	colorTypes_view = MBorder(16.0, 16.0, 0.0, 0.0, MLines([
		TFixed(0.0, 8.0),
		MCols([TFixed(24.0, 0.0),MText(_("Color Type"), [MTitle])]),
		TFixed(0.0, 16.0),
		table
	]));

	MLet("body", colorTypes_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()],  if (allowEdit.allow) colorTypes_actions else [TEmpty()] )),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

onAddColorType(manager : MaterialManager, jwt : string, colorTypes : DynamicBehaviour<[ColorType]>,  defaultColorType : () -> ColorType, callback : (ColorType) -> void, onError : (string) -> void) -> void {
	_colorType = defaultColorType();
	close = make(false);
	onAdd = \newColorType -> {
		insertColorType(jwt, newColorType, \id -> {
			newColorType2 = ColorType(id, newColorType.name);
			dynArrayPush(colorTypes, newColorType2);
			callback(newColorType2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editColorTypeData(manager, _colorType, onAdd, onCancel)
	);
}

onEditColorType(manager : MaterialManager, jwt : string, colorTypes : DynamicBehaviour<[ColorType]>, index : int, onEdit : (ColorType) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(colorTypes))) {
		close = make(false);
		onColorTypeEdit = \editedColorType -> {
			if (onEdit(editedColorType)) {
	 			updateColorType(jwt, editedColorType, \ok -> {
					next(colorTypes, replace(getValue(colorTypes), index, editedColorType))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editColorTypeData(manager, getValue(colorTypes)[index], onColorTypeEdit, onCancel)
		);
	}
}

editColorTypeData(manager : MaterialManager, _colorType : ColorType, onSave : (ColorType) -> void, onCancel : () -> void) -> Material {
	
	_colorType_name = make(_colorType.name);

	_colorType_actions = [
		MTextButton(_("CANCEL"), \ -> {onCancel()}, [MBlue(500)], [MShortcut("esc"), MEnabled(const(true))]),
		MTextButton(_("SAVE"), \ -> {onSave(ColorType(_colorType.id, _colorType_name |> fgetValue))}, [MBlue(500), MButtonRaised], [MShortcut(""), MEnabled(const(true))]),
	];

	_colorType_view = MBorder(16.0, 16.0, 0.0, 0.0, 
		MLines([
			MText(_("Color Type"), [MTitle]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("name", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_colorType_name, [MLabel(_("Name")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			])
	]));

	MLet("body", _colorType_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()], _colorType_actions)),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

PlantColorTable(manager : MaterialManager, jwt : string, plantColors : DynamicBehaviour<[PlantColor]>, colorTypes : DynamicBehaviour<[ColorType]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<PlantColor, ?>]) -> Material {
	
	defaultPlantColor = extractStruct(style, SubTableDefaultValue(makePlantColor));
	allowEdit = extractStruct(style, SubTableAllowEdit(true));
	onEdit = extractStruct(style, SubTableOnEdit(\__ -> true));
	onError = extractStruct(style, SubTableOnError(println));
	checkBeforeDelete = extractStruct(style, SubTableCheckBeforeDelete(\__ -> None()));
	onAddHandler = extractStruct(style, SubTableOnAdd(\__ -> {}));
	onAdd = extractStruct(style, SubTableAddEvent(\-> {onAddPlantColor(manager, jwt, plantColors, colorTypes, defaultPlantColor.fn, onAddHandler.fn, onError.fn)}));
	onDelete = extractStruct(style, SubTableDeleteEvent(\item, callback -> {
		callback2 = \-> {
			index = elemIndex(getValue(plantColors), item, -1);
			deletePlantColor(jwt, item, \ok -> next(plantColors, removeIndex(getValue(plantColors), index)), onError.fn);
			callback();
		}
		showDeleteConfirmationDialog(manager, jwt, callback2, onError.fn);
	}));
	customIcons : [SubTableCustomIcon] = fold(style, [], \acc, s -> {
		switch(s) {
			SubTableCustomIcon(__, __, __): arrayPush(acc, s);
			default: acc;
		}
	});
	enabledColumnsB = extractStruct(style, SubTableEnableColumns(make(map(enumFromTo(1, 4), \__ -> true)))).enabledB;

	plantColors_selectedIndex = make(-1);

	// Filters
	filtered_plantColors = make([]);
	isInlineEdit = make(false);
	original_plantColors_selectedIndex = plantColors_selectedIndex;

	plantColorsTouch2MRow = \item : PlantColor -> {
		item_colorTypeId = make(item.colorTypeId);
		colorTypeId_colorTypes_id = make(findiDef(colorTypes |> getValue, \p -> p.id == item.colorTypeId, -1));
		colorTypeId_colorTypes_id_unsubscribe_foreign = \ -> subscribe(colorTypeId_colorTypes_id, \i -> if (i != -1) next(item_colorTypeId, getValue(colorTypes)[i].id));
		[
			MText(item.name, [MDataRow]),
			MText(item.colorNumber, [MDataRow]),
			MConstruct([colorTypeId_colorTypes_id_unsubscribe_foreign], {
					ind = getValue(colorTypeId_colorTypes_id);
					if(ind == -1) {
						MText("", [MDataRow])
					} else {
						MText(map(colorTypes |> getValue, \i -> i.name)[ind], [MDataRow])
					}
				}
			),
		]
	};

	table = MConstruct([\ -> 
		subscribe(plantColors, \__-> {
		if (!getValue(isInlineEdit)) nextDistinct(filtered_plantColors, getValue(plantColors))
		})
	], MSelect(fselect2(filtered_plantColors, enabledColumnsB, FLift2(\f, e -> Pair(f, e))), \itemsEnabled -> {
		items = itemsEnabled.first;
		visibleColumnsIndices = filtermapi(itemsEnabled.second, \i, item -> if (item) Some(i) else None());
		MDataTable(
			filtermapi([
				MColumn(_("Name"), "", 144, [MAutoSort]),
				MColumn(_("Color Number"), "", 144, [MAutoSort]),
				MColumn(_("Color Type Id"), "", 144, [MAutoSort]),
				MColumn(_(""), "", length(customIcons) * 28, []),
			], \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None()),
			map(items, \item -> filtermapi(plantColorsTouch2MRow(item), \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None())),
			[MSingleSelection(plantColors_selectedIndex), MCondensed(true), MPaginationAutoScaling]
		)
	}));

	plantColors_actions = [
		MTextButton(_("ADD"), \ -> {onAddPlantColor(manager, jwt, plantColors, colorTypes, defaultPlantColor.fn, onAddHandler.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(const(true))]),
		MTextButton(_("EDIT"), \ -> {onEditPlantColor(manager, jwt, plantColors, colorTypes, original_plantColors_selectedIndex |> fgetValue, onEdit.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(plantColors_selectedIndex, -1)))]),
		MTextButton(_("DELETE"), \ -> {
			filteredItemsVal = getValue(filtered_plantColors);
			index = plantColors_selectedIndex |> fgetValue;
			errorDeleteMsgM = checkBeforeDelete.fn(filteredItemsVal[index]);
			if (isNone(errorDeleteMsgM)) {
				itemsVal = getValue(plantColors);
				original_index = original_plantColors_selectedIndex |> fgetValue;
				if (index > -1 && index < length(filteredItemsVal)) {
					if (exists(getValue(plants), \r -> r.leafColorId == filteredItemsVal[index].id)) {
						ShowMConfirmation(
							manager,
							"",
							"OK",
							"enter",
							MText("This plantColor is referenced in existing tables. You can't delete it", [])
						)
					} else {
						onDelete.fn(filteredItemsVal[index], \-> {
						next(plantColors, removeIndex(itemsVal, original_index));
						next(plantColors_selectedIndex, -1);
						});
					}
				}
			} else {
				errorDeleteMsg = either(errorDeleteMsgM, "");
				if (errorDeleteMsg != "") {
					close = make(false);
					ShowMDialog(manager, close,
						[
							MDialogTitle("Delete error"),
							MDialogUseFrame(),
							MDialogActions([
								MTextButton("CLOSE", \ -> next(close, true), [MBlue(500)], [])
							]),
						],
						MText(errorDeleteMsg, [])
					);
				}
			}
		}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(plantColors_selectedIndex, -1)))]),
	];

	plantColors_view = MBorder(16.0, 16.0, 0.0, 0.0, MLines([
		TFixed(0.0, 8.0),
		MCols([TFixed(24.0, 0.0),MText(_("Plant Color"), [MTitle])]),
		TFixed(0.0, 16.0),
		table
	]));

	MLet("body", plantColors_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()],  if (allowEdit.allow) plantColors_actions else [TEmpty()] )),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

onAddPlantColor(manager : MaterialManager, jwt : string, plantColors : DynamicBehaviour<[PlantColor]>, colorTypes : DynamicBehaviour<[ColorType]>,  defaultPlantColor : () -> PlantColor, callback : (PlantColor) -> void, onError : (string) -> void) -> void {
	_plantColor = defaultPlantColor();
	close = make(false);
	onAdd = \newPlantColor -> {
		insertPlantColor(jwt, newPlantColor, \id -> {
			newPlantColor2 = PlantColor(id, newPlantColor.name, newPlantColor.colorNumber, newPlantColor.colorTypeId);
			dynArrayPush(plantColors, newPlantColor2);
			callback(newPlantColor2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editPlantColorData(manager, _plantColor, getValue(colorTypes), onAdd, onCancel)
	);
}

onEditPlantColor(manager : MaterialManager, jwt : string, plantColors : DynamicBehaviour<[PlantColor]>, colorTypes : DynamicBehaviour<[ColorType]>, index : int, onEdit : (PlantColor) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(plantColors))) {
		close = make(false);
		onPlantColorEdit = \editedPlantColor -> {
			if (onEdit(editedPlantColor)) {
	 			updatePlantColor(jwt, editedPlantColor, \ok -> {
					next(plantColors, replace(getValue(plantColors), index, editedPlantColor))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editPlantColorData(manager, getValue(plantColors)[index], getValue(colorTypes), onPlantColorEdit, onCancel)
		);
	}
}

editPlantColorData(manager : MaterialManager, _plantColor : PlantColor, colorTypes : [ColorType], onSave : (PlantColor) -> void, onCancel : () -> void) -> Material {
	
	_plantColor_name = make(_plantColor.name);
	_plantColor_colorNumber = make(_plantColor.colorNumber);
	_plantColor_colorTypeId = make(_plantColor.colorTypeId);
	colorTypeId_colorTypes_id = make(findiDef(colorTypes, \p -> p.id == _plantColor.colorTypeId, -1));
	colorTypeId_colorTypes_id_unsubscribe_foreign = \ -> subscribe(colorTypeId_colorTypes_id, \i -> if (i != -1) next(_plantColor_colorTypeId, colorTypes[i].id));

	_plantColor_actions = [
		MTextButton(_("CANCEL"), \ -> {onCancel()}, [MBlue(500)], [MShortcut("esc"), MEnabled(const(true))]),
		MTextButton(_("SAVE"), \ -> {onSave(PlantColor(_plantColor.id, _plantColor_name |> fgetValue, _plantColor_colorNumber |> fgetValue, _plantColor_colorTypeId |> fgetValue))}, [MBlue(500), MButtonRaised], [MShortcut(""), MEnabled(const(true))]),
	];

	_plantColor_view = MBorder(16.0, 16.0, 0.0, 0.0, 
		MLines([
			MText(_("Plant Color"), [MTitle]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("name", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_plantColor_name, [MLabel(_("Name")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("color_number", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_plantColor_colorNumber, [MLabel(_("Color Number")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MConstruct([colorTypeId_colorTypes_id_unsubscribe_foreign], 				MCols([
					MBorder(0., 18.0, 0., 0.0, MText(_("Color Type Id"), [])),
					TFixed(16.0, 0.0),
					getDropDownOrAutoComplete(colorTypeId_colorTypes_id, map(colorTypes, \i -> i.name), false, None(), -1, _(""), [])
				])
			)
	]));

	MLet("body", _plantColor_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()], _plantColor_actions)),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

LeafTypeTable(manager : MaterialManager, jwt : string, leafTypes : DynamicBehaviour<[LeafType]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<LeafType, ?>]) -> Material {
	
	defaultLeafType = extractStruct(style, SubTableDefaultValue(makeLeafType));
	allowEdit = extractStruct(style, SubTableAllowEdit(true));
	onEdit = extractStruct(style, SubTableOnEdit(\__ -> true));
	onError = extractStruct(style, SubTableOnError(println));
	checkBeforeDelete = extractStruct(style, SubTableCheckBeforeDelete(\__ -> None()));
	onAddHandler = extractStruct(style, SubTableOnAdd(\__ -> {}));
	onAdd = extractStruct(style, SubTableAddEvent(\-> {onAddLeafType(manager, jwt, leafTypes, defaultLeafType.fn, onAddHandler.fn, onError.fn)}));
	onDelete = extractStruct(style, SubTableDeleteEvent(\item, callback -> {
		callback2 = \-> {
			index = elemIndex(getValue(leafTypes), item, -1);
			deleteLeafType(jwt, item, \ok -> next(leafTypes, removeIndex(getValue(leafTypes), index)), onError.fn);
			callback();
		}
		showDeleteConfirmationDialog(manager, jwt, callback2, onError.fn);
	}));
	customIcons : [SubTableCustomIcon] = fold(style, [], \acc, s -> {
		switch(s) {
			SubTableCustomIcon(__, __, __): arrayPush(acc, s);
			default: acc;
		}
	});
	enabledColumnsB = extractStruct(style, SubTableEnableColumns(make(map(enumFromTo(1, 3), \__ -> true)))).enabledB;

	leafTypes_selectedIndex = make(-1);

	// Filters
	filtered_leafTypes = make([]);
	isInlineEdit = make(false);
	original_leafTypes_selectedIndex = leafTypes_selectedIndex;

	leafTypesTouch2MRow = \item : LeafType -> {
		[
			MText(item.name, [MDataRow]),
			MText(item.description, [MDataRow]),
		]
	};

	table = MConstruct([\ -> 
		subscribe(leafTypes, \__-> {
		if (!getValue(isInlineEdit)) nextDistinct(filtered_leafTypes, getValue(leafTypes))
		})
	], MSelect(fselect2(filtered_leafTypes, enabledColumnsB, FLift2(\f, e -> Pair(f, e))), \itemsEnabled -> {
		items = itemsEnabled.first;
		visibleColumnsIndices = filtermapi(itemsEnabled.second, \i, item -> if (item) Some(i) else None());
		MDataTable(
			filtermapi([
				MColumn(_("Name"), "", 144, [MAutoSort]),
				MColumn(_("Description"), "", 144, [MAutoSort]),
				MColumn(_(""), "", length(customIcons) * 28, []),
			], \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None()),
			map(items, \item -> filtermapi(leafTypesTouch2MRow(item), \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None())),
			[MSingleSelection(leafTypes_selectedIndex), MCondensed(true), MPaginationAutoScaling]
		)
	}));

	leafTypes_actions = [
		MTextButton(_("ADD"), \ -> {onAddLeafType(manager, jwt, leafTypes, defaultLeafType.fn, onAddHandler.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(const(true))]),
		MTextButton(_("EDIT"), \ -> {onEditLeafType(manager, jwt, leafTypes, original_leafTypes_selectedIndex |> fgetValue, onEdit.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(leafTypes_selectedIndex, -1)))]),
		MTextButton(_("DELETE"), \ -> {
			filteredItemsVal = getValue(filtered_leafTypes);
			index = leafTypes_selectedIndex |> fgetValue;
			errorDeleteMsgM = checkBeforeDelete.fn(filteredItemsVal[index]);
			if (isNone(errorDeleteMsgM)) {
				itemsVal = getValue(leafTypes);
				original_index = original_leafTypes_selectedIndex |> fgetValue;
				if (index > -1 && index < length(filteredItemsVal)) {
					if (exists(getValue(plants), \r -> r.leafTypeId == filteredItemsVal[index].id)) {
						ShowMConfirmation(
							manager,
							"",
							"OK",
							"enter",
							MText("This leafType is referenced in existing tables. You can't delete it", [])
						)
					} else {
						onDelete.fn(filteredItemsVal[index], \-> {
						next(leafTypes, removeIndex(itemsVal, original_index));
						next(leafTypes_selectedIndex, -1);
						});
					}
				}
			} else {
				errorDeleteMsg = either(errorDeleteMsgM, "");
				if (errorDeleteMsg != "") {
					close = make(false);
					ShowMDialog(manager, close,
						[
							MDialogTitle("Delete error"),
							MDialogUseFrame(),
							MDialogActions([
								MTextButton("CLOSE", \ -> next(close, true), [MBlue(500)], [])
							]),
						],
						MText(errorDeleteMsg, [])
					);
				}
			}
		}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(leafTypes_selectedIndex, -1)))]),
	];

	leafTypes_view = MBorder(16.0, 16.0, 0.0, 0.0, MLines([
		TFixed(0.0, 8.0),
		MCols([TFixed(24.0, 0.0),MText(_("Leaf Type"), [MTitle])]),
		TFixed(0.0, 16.0),
		table
	]));

	MLet("body", leafTypes_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()],  if (allowEdit.allow) leafTypes_actions else [TEmpty()] )),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

onAddLeafType(manager : MaterialManager, jwt : string, leafTypes : DynamicBehaviour<[LeafType]>,  defaultLeafType : () -> LeafType, callback : (LeafType) -> void, onError : (string) -> void) -> void {
	_leafType = defaultLeafType();
	close = make(false);
	onAdd = \newLeafType -> {
		insertLeafType(jwt, newLeafType, \id -> {
			newLeafType2 = LeafType(id, newLeafType.name, newLeafType.description);
			dynArrayPush(leafTypes, newLeafType2);
			callback(newLeafType2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editLeafTypeData(manager, _leafType, onAdd, onCancel)
	);
}

onEditLeafType(manager : MaterialManager, jwt : string, leafTypes : DynamicBehaviour<[LeafType]>, index : int, onEdit : (LeafType) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(leafTypes))) {
		close = make(false);
		onLeafTypeEdit = \editedLeafType -> {
			if (onEdit(editedLeafType)) {
	 			updateLeafType(jwt, editedLeafType, \ok -> {
					next(leafTypes, replace(getValue(leafTypes), index, editedLeafType))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editLeafTypeData(manager, getValue(leafTypes)[index], onLeafTypeEdit, onCancel)
		);
	}
}

editLeafTypeData(manager : MaterialManager, _leafType : LeafType, onSave : (LeafType) -> void, onCancel : () -> void) -> Material {
	
	_leafType_name = make(_leafType.name);
	_leafType_description = make(_leafType.description);

	_leafType_actions = [
		MTextButton(_("CANCEL"), \ -> {onCancel()}, [MBlue(500)], [MShortcut("esc"), MEnabled(const(true))]),
		MTextButton(_("SAVE"), \ -> {onSave(LeafType(_leafType.id, _leafType_name |> fgetValue, _leafType_description |> fgetValue))}, [MBlue(500), MButtonRaised], [MShortcut(""), MEnabled(const(true))]),
	];

	_leafType_view = MBorder(16.0, 16.0, 0.0, 0.0, 
		MLines([
			MText(_("Leaf Type"), [MTitle]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("name", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_leafType_name, [MLabel(_("Name")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("description", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_leafType_description, [MLabel(_("Description")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			])
	]));

	MLet("body", _leafType_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()], _leafType_actions)),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

CarePlanTable(manager : MaterialManager, jwt : string, carePlans : DynamicBehaviour<[CarePlan]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<CarePlan, ?>]) -> Material {
	
	defaultCarePlan = extractStruct(style, SubTableDefaultValue(makeCarePlan));
	allowEdit = extractStruct(style, SubTableAllowEdit(true));
	onEdit = extractStruct(style, SubTableOnEdit(\__ -> true));
	onError = extractStruct(style, SubTableOnError(println));
	checkBeforeDelete = extractStruct(style, SubTableCheckBeforeDelete(\__ -> None()));
	onAddHandler = extractStruct(style, SubTableOnAdd(\__ -> {}));
	onAdd = extractStruct(style, SubTableAddEvent(\-> {onAddCarePlan(manager, jwt, carePlans, defaultCarePlan.fn, onAddHandler.fn, onError.fn)}));
	onDelete = extractStruct(style, SubTableDeleteEvent(\item, callback -> {
		callback2 = \-> {
			index = elemIndex(getValue(carePlans), item, -1);
			deleteCarePlan(jwt, item, \ok -> next(carePlans, removeIndex(getValue(carePlans), index)), onError.fn);
			callback();
		}
		showDeleteConfirmationDialog(manager, jwt, callback2, onError.fn);
	}));
	customIcons : [SubTableCustomIcon] = fold(style, [], \acc, s -> {
		switch(s) {
			SubTableCustomIcon(__, __, __): arrayPush(acc, s);
			default: acc;
		}
	});
	enabledColumnsB = extractStruct(style, SubTableEnableColumns(make(map(enumFromTo(1, 9), \__ -> true)))).enabledB;

	carePlans_selectedIndex = make(-1);

	// Filters
	filtered_carePlans = make([]);
	isInlineEdit = make(false);
	original_carePlans_selectedIndex = carePlans_selectedIndex;

	carePlansTouch2MRow = \item : CarePlan -> {
		item_light = make(item.light);
		[
			MText(item.name, [MDataRow]),
			MText(item.description, [MDataRow]),
			MText(item.pour |> d2s, [MDataRow]),
			MSwitchControl(item_light, [MBlue(500), MEnabled(const(false))]),
			MText(item.turn |> d2s, [MDataRow]),
			MText(item.tempreture |> i2s, [MDataRow]),
			MText(item.spray |> d2s, [MDataRow]),
			MText(item.wipeLeaves |> d2s, [MDataRow]),
		]
	};

	table = MConstruct([\ -> 
		subscribe(carePlans, \__-> {
		if (!getValue(isInlineEdit)) nextDistinct(filtered_carePlans, getValue(carePlans))
		})
	], MSelect(fselect2(filtered_carePlans, enabledColumnsB, FLift2(\f, e -> Pair(f, e))), \itemsEnabled -> {
		items = itemsEnabled.first;
		visibleColumnsIndices = filtermapi(itemsEnabled.second, \i, item -> if (item) Some(i) else None());
		MDataTable(
			filtermapi([
				MColumn(_("Name"), "", 144, [MAutoSort]),
				MColumn(_("Description"), "", 144, [MAutoSort]),
				MColumn(_("Pour"), _("How often you should pour the plant per week. 2 - two times per week, 0.5 - 1 time per two weeks"), 144, [MAutoSort]),
				MColumn(_("Light"), _("0 - the plant prefers dark, 1 - light"), 144, [MAutoSort]),
				MColumn(_("Turn"), _("Period of turning plant around per week"), 144, [MAutoSort]),
				MColumn(_("Tempreture"), _("Prefered tempreture"), 144, [MAutoSort]),
				MColumn(_("Spray"), _("Period of spraying per week"), 144, [MAutoSort]),
				MColumn(_("Wipe Leaves"), _("Period of wiping leaves per week"), 144, [MAutoSort]),
				MColumn(_(""), "", length(customIcons) * 28, []),
			], \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None()),
			map(items, \item -> filtermapi(carePlansTouch2MRow(item), \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None())),
			[MSingleSelection(carePlans_selectedIndex), MCondensed(true), MPaginationAutoScaling]
		)
	}));

	carePlans_actions = [
		MTextButton(_("ADD"), \ -> {onAddCarePlan(manager, jwt, carePlans, defaultCarePlan.fn, onAddHandler.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(const(true))]),
		MTextButton(_("EDIT"), \ -> {onEditCarePlan(manager, jwt, carePlans, original_carePlans_selectedIndex |> fgetValue, onEdit.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(carePlans_selectedIndex, -1)))]),
		MTextButton(_("DELETE"), \ -> {
			filteredItemsVal = getValue(filtered_carePlans);
			index = carePlans_selectedIndex |> fgetValue;
			errorDeleteMsgM = checkBeforeDelete.fn(filteredItemsVal[index]);
			if (isNone(errorDeleteMsgM)) {
				itemsVal = getValue(carePlans);
				original_index = original_carePlans_selectedIndex |> fgetValue;
				if (index > -1 && index < length(filteredItemsVal)) {
					if (exists(getValue(plants), \r -> r.carePlanId == filteredItemsVal[index].id)) {
						ShowMConfirmation(
							manager,
							"",
							"OK",
							"enter",
							MText("This carePlan is referenced in existing tables. You can't delete it", [])
						)
					} else {
						onDelete.fn(filteredItemsVal[index], \-> {
						next(carePlans, removeIndex(itemsVal, original_index));
						next(carePlans_selectedIndex, -1);
						});
					}
				}
			} else {
				errorDeleteMsg = either(errorDeleteMsgM, "");
				if (errorDeleteMsg != "") {
					close = make(false);
					ShowMDialog(manager, close,
						[
							MDialogTitle("Delete error"),
							MDialogUseFrame(),
							MDialogActions([
								MTextButton("CLOSE", \ -> next(close, true), [MBlue(500)], [])
							]),
						],
						MText(errorDeleteMsg, [])
					);
				}
			}
		}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(carePlans_selectedIndex, -1)))]),
	];

	carePlans_view = MBorder(16.0, 16.0, 0.0, 0.0, MLines([
		TFixed(0.0, 8.0),
		MCols([TFixed(24.0, 0.0),MText(_("Care Plan"), [MTitle])]),
		TFixed(0.0, 16.0),
		table
	]));

	MLet("body", carePlans_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()],  if (allowEdit.allow) carePlans_actions else [TEmpty()] )),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

onAddCarePlan(manager : MaterialManager, jwt : string, carePlans : DynamicBehaviour<[CarePlan]>,  defaultCarePlan : () -> CarePlan, callback : (CarePlan) -> void, onError : (string) -> void) -> void {
	_carePlan = defaultCarePlan();
	close = make(false);
	onAdd = \newCarePlan -> {
		insertCarePlan(jwt, newCarePlan, \id -> {
			newCarePlan2 = CarePlan(id, newCarePlan.name, newCarePlan.description, newCarePlan.pour, newCarePlan.light, newCarePlan.turn, newCarePlan.tempreture, newCarePlan.spray, newCarePlan.wipeLeaves);
			dynArrayPush(carePlans, newCarePlan2);
			callback(newCarePlan2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editCarePlanData(manager, _carePlan, onAdd, onCancel)
	);
}

onEditCarePlan(manager : MaterialManager, jwt : string, carePlans : DynamicBehaviour<[CarePlan]>, index : int, onEdit : (CarePlan) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(carePlans))) {
		close = make(false);
		onCarePlanEdit = \editedCarePlan -> {
			if (onEdit(editedCarePlan)) {
	 			updateCarePlan(jwt, editedCarePlan, \ok -> {
					next(carePlans, replace(getValue(carePlans), index, editedCarePlan))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editCarePlanData(manager, getValue(carePlans)[index], onCarePlanEdit, onCancel)
		);
	}
}

editCarePlanData(manager : MaterialManager, _carePlan : CarePlan, onSave : (CarePlan) -> void, onCancel : () -> void) -> Material {
	
	_carePlan_name = make(_carePlan.name);
	_carePlan_description = make(_carePlan.description);
	_carePlan_pour = make(_carePlan.pour |> d2s);
	_carePlan_light = make(_carePlan.light);
	_carePlan_turn = make(_carePlan.turn |> d2s);
	_carePlan_tempreture = make(_carePlan.tempreture |> i2s);
	_carePlan_spray = make(_carePlan.spray |> d2s);
	_carePlan_wipeLeaves = make(_carePlan.wipeLeaves |> d2s);

	_carePlan_actions = [
		MTextButton(_("CANCEL"), \ -> {onCancel()}, [MBlue(500)], [MShortcut("esc"), MEnabled(const(true))]),
		MTextButton(_("SAVE"), \ -> {onSave(CarePlan(_carePlan.id, _carePlan_name |> fgetValue, _carePlan_description |> fgetValue, _carePlan_pour |> fgetValue |> s2d, _carePlan_light |> fgetValue, _carePlan_turn |> fgetValue |> s2d, _carePlan_tempreture |> fgetValue |> s2i, _carePlan_spray |> fgetValue |> s2d, _carePlan_wipeLeaves |> fgetValue |> s2d))}, [MBlue(500), MButtonRaised], [MShortcut(""), MEnabled(const(true))]),
	];

	_carePlan_view = MBorder(16.0, 16.0, 0.0, 0.0, 
		MLines([
			MText(_("Care Plan"), [MTitle]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("name", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_name, [MLabel(_("Name")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("description", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_description, [MLabel(_("Description")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("pour", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_pour, [MLabel(_("Pour")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MText(_("Light"), []), TFixed(0.0, 48.0)),
				MTooltip(
					MSwitchControl(_carePlan_light, [MBlue(500), MEnabled(const(true))]),
					MText(_("0 - the plant prefers dark, 1 - light"), []), []
				)
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("turn", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_turn, [MLabel(_("Turn")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("tempreture", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_tempreture, [MLabel(_("Tempreture")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("spray", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_spray, [MLabel(_("Spray")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("wipe_leaves", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_carePlan_wipeLeaves, [MLabel(_("Wipe Leaves")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			])
	]));

	MLet("body", _carePlan_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()], _carePlan_actions)),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

PlantTable(manager : MaterialManager, jwt : string, plants : DynamicBehaviour<[Plant]>, families : DynamicBehaviour<[Family]>, plantColors : DynamicBehaviour<[PlantColor]>, leafTypes : DynamicBehaviour<[LeafType]>, carePlans : DynamicBehaviour<[CarePlan]>, style : [SubTableStyle<Plant, ?>]) -> Material {
	
	defaultPlant = extractStruct(style, SubTableDefaultValue(makePlant));
	allowEdit = extractStruct(style, SubTableAllowEdit(true));
	onEdit = extractStruct(style, SubTableOnEdit(\__ -> true));
	onError = extractStruct(style, SubTableOnError(println));
	checkBeforeDelete = extractStruct(style, SubTableCheckBeforeDelete(\__ -> None()));
	onAddHandler = extractStruct(style, SubTableOnAdd(\__ -> {}));
	onAdd = extractStruct(style, SubTableAddEvent(\-> {onAddPlant(manager, jwt, plants, families, plantColors, leafTypes, carePlans, defaultPlant.fn, onAddHandler.fn, onError.fn)}));
	onDelete = extractStruct(style, SubTableDeleteEvent(\item, callback -> {
		callback2 = \-> {
			index = elemIndex(getValue(plants), item, -1);
			deletePlant(jwt, item, \ok -> next(plants, removeIndex(getValue(plants), index)), onError.fn);
			callback();
		}
		showDeleteConfirmationDialog(manager, jwt, callback2, onError.fn);
	}));
	customIcons : [SubTableCustomIcon] = fold(style, [], \acc, s -> {
		switch(s) {
			SubTableCustomIcon(__, __, __): arrayPush(acc, s);
			default: acc;
		}
	});
	enabledColumnsB = extractStruct(style, SubTableEnableColumns(make(map(enumFromTo(1, 8), \__ -> true)))).enabledB;

	plants_selectedIndex = make(-1);

	// Filters
	filtered_plants = make([]);
	isInlineEdit = make(false);
	original_plants_selectedIndex = plants_selectedIndex;

	plantsTouch2MRow = \item : Plant -> {
		item_familyId = make(item.familyId);
		familyId_families_id = make(findiDef(families |> getValue, \p -> p.id == item.familyId, -1));
		familyId_families_id_unsubscribe_foreign = \ -> subscribe(familyId_families_id, \i -> if (i != -1) next(item_familyId, getValue(families)[i].id));
		item_leafColorId = make(item.leafColorId);
		leafColorId_plantColors_id = make(findiDef(plantColors |> getValue, \p -> p.id == item.leafColorId, -1));
		leafColorId_plantColors_id_unsubscribe_foreign = \ -> subscribe(leafColorId_plantColors_id, \i -> if (i != -1) next(item_leafColorId, getValue(plantColors)[i].id));
		item_budColorId = make(item.budColorId);
		budColorId_plantColors_id = make(findiDef(plantColors |> getValue, \p -> p.id == item.budColorId, -1));
		budColorId_plantColors_id_unsubscribe_foreign = \ -> subscribe(budColorId_plantColors_id, \i -> if (i != -1) next(item_budColorId, getValue(plantColors)[i].id));
		item_leafTypeId = make(item.leafTypeId);
		leafTypeId_leafTypes_id = make(findiDef(leafTypes |> getValue, \p -> p.id == item.leafTypeId, -1));
		leafTypeId_leafTypes_id_unsubscribe_foreign = \ -> subscribe(leafTypeId_leafTypes_id, \i -> if (i != -1) next(item_leafTypeId, getValue(leafTypes)[i].id));
		item_carePlanId = make(item.carePlanId);
		carePlanId_carePlans_id = make(findiDef(carePlans |> getValue, \p -> p.id == item.carePlanId, -1));
		carePlanId_carePlans_id_unsubscribe_foreign = \ -> subscribe(carePlanId_carePlans_id, \i -> if (i != -1) next(item_carePlanId, getValue(carePlans)[i].id));
		[
			MText(item.name, [MDataRow]),
			MText(item.height |> i2s, [MDataRow]),
			MConstruct([familyId_families_id_unsubscribe_foreign], {
					ind = getValue(familyId_families_id);
					if(ind == -1) {
						MText("", [MDataRow])
					} else {
						MText(map(families |> getValue, \i -> i.name)[ind], [MDataRow])
					}
				}
			),
			MConstruct([leafColorId_plantColors_id_unsubscribe_foreign], {
					ind = getValue(leafColorId_plantColors_id);
					if(ind == -1) {
						MText("", [MDataRow])
					} else {
						MText(map(plantColors |> getValue, \i -> i.name)[ind], [MDataRow])
					}
				}
			),
			MConstruct([budColorId_plantColors_id_unsubscribe_foreign], {
					ind = getValue(budColorId_plantColors_id);
					if(ind == -1) {
						MText("", [MDataRow])
					} else {
						MText(map(plantColors |> getValue, \i -> i.name)[ind], [MDataRow])
					}
				}
			),
			MConstruct([leafTypeId_leafTypes_id_unsubscribe_foreign], {
					ind = getValue(leafTypeId_leafTypes_id);
					if(ind == -1) {
						MText("", [MDataRow])
					} else {
						MText(map(leafTypes |> getValue, \i -> i.name)[ind], [MDataRow])
					}
				}
			),
			MConstruct([carePlanId_carePlans_id_unsubscribe_foreign], {
					ind = getValue(carePlanId_carePlans_id);
					if(ind == -1) {
						MText("", [MDataRow])
					} else {
						MText(map(carePlans |> getValue, \i -> i.name)[ind], [MDataRow])
					}
				}
			),
		]
	};

	table = MConstruct([\ -> 
		subscribe(plants, \__-> {
		if (!getValue(isInlineEdit)) nextDistinct(filtered_plants, getValue(plants))
		})
	], MSelect(fselect2(filtered_plants, enabledColumnsB, FLift2(\f, e -> Pair(f, e))), \itemsEnabled -> {
		items = itemsEnabled.first;
		visibleColumnsIndices = filtermapi(itemsEnabled.second, \i, item -> if (item) Some(i) else None());
		MDataTable(
			filtermapi([
				MColumn(_("Name"), "", 144, [MAutoSort]),
				MColumn(_("Height"), "", 144, [MAutoSort]),
				MColumn(_("Family Id"), "", 144, [MAutoSort]),
				MColumn(_("Leaf Color Id"), "", 144, [MAutoSort]),
				MColumn(_("Bud Color Id"), "", 144, [MAutoSort]),
				MColumn(_("Leaf Type Id"), "", 144, [MAutoSort]),
				MColumn(_("Care Plan Id"), "", 144, [MAutoSort]),
				MColumn(_(""), "", length(customIcons) * 28, []),
			], \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None()),
			map(items, \item -> filtermapi(plantsTouch2MRow(item), \i, it -> if (contains(visibleColumnsIndices, i)) Some(it) else None())),
			[MSingleSelection(plants_selectedIndex), MCondensed(true), MPaginationAutoScaling]
		)
	}));

	plants_actions = [
		MTextButton(_("ADD"), \ -> {onAddPlant(manager, jwt, plants, families, plantColors, leafTypes, carePlans, defaultPlant.fn, onAddHandler.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(const(true))]),
		MTextButton(_("EDIT"), \ -> {onEditPlant(manager, jwt, plants, families, plantColors, leafTypes, carePlans, original_plants_selectedIndex |> fgetValue, onEdit.fn, onError.fn)}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(plants_selectedIndex, -1)))]),
		MTextButton(_("DELETE"), \ -> {
			filteredItemsVal = getValue(filtered_plants);
			index = plants_selectedIndex |> fgetValue;
			errorDeleteMsgM = checkBeforeDelete.fn(filteredItemsVal[index]);
			if (isNone(errorDeleteMsgM)) {
				itemsVal = getValue(plants);
				original_index = original_plants_selectedIndex |> fgetValue;
				if (index > -1 && index < length(filteredItemsVal)) {
					onDelete.fn(filteredItemsVal[index], \-> {
						next(plants, removeIndex(itemsVal, original_index));
						next(plants_selectedIndex, -1);
					});
				}
			} else {
				errorDeleteMsg = either(errorDeleteMsgM, "");
				if (errorDeleteMsg != "") {
					close = make(false);
					ShowMDialog(manager, close,
						[
							MDialogTitle("Delete error"),
							MDialogUseFrame(),
							MDialogActions([
								MTextButton("CLOSE", \ -> next(close, true), [MBlue(500)], [])
							]),
						],
						MText(errorDeleteMsg, [])
					);
				}
			}
		}, [MBlue(500)], [MShortcut(""), MEnabled(fnot(feq(plants_selectedIndex, -1)))]),
	];

	plants_view = MBorder(16.0, 16.0, 0.0, 0.0, MLines([
		TFixed(0.0, 8.0),
		MCols([TFixed(24.0, 0.0),MText(_("Plant"), [MTitle])]),
		TFixed(0.0, 16.0),
		table
	]));

	MLet("body", plants_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()],  if (allowEdit.allow) plants_actions else [TEmpty()] )),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

onAddPlant(manager : MaterialManager, jwt : string, plants : DynamicBehaviour<[Plant]>, families : DynamicBehaviour<[Family]>, plantColors : DynamicBehaviour<[PlantColor]>, leafTypes : DynamicBehaviour<[LeafType]>, carePlans : DynamicBehaviour<[CarePlan]>,  defaultPlant : () -> Plant, callback : (Plant) -> void, onError : (string) -> void) -> void {
	_plant = defaultPlant();
	close = make(false);
	onAdd = \newPlant -> {
		insertPlant(jwt, newPlant, \id -> {
			newPlant2 = Plant(id, newPlant.name, newPlant.familyId, newPlant.leafColorId, newPlant.budColorId, newPlant.height, newPlant.leafTypeId, newPlant.carePlanId);
			dynArrayPush(plants, newPlant2);
			callback(newPlant2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editPlantData(manager, _plant, getValue(families), getValue(plantColors), getValue(leafTypes), getValue(carePlans), onAdd, onCancel)
	);
}

onEditPlant(manager : MaterialManager, jwt : string, plants : DynamicBehaviour<[Plant]>, families : DynamicBehaviour<[Family]>, plantColors : DynamicBehaviour<[PlantColor]>, leafTypes : DynamicBehaviour<[LeafType]>, carePlans : DynamicBehaviour<[CarePlan]>, index : int, onEdit : (Plant) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(plants))) {
		close = make(false);
		onPlantEdit = \editedPlant -> {
			if (onEdit(editedPlant)) {
	 			updatePlant(jwt, editedPlant, \ok -> {
					next(plants, replace(getValue(plants), index, editedPlant))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editPlantData(manager, getValue(plants)[index], getValue(families), getValue(plantColors), getValue(leafTypes), getValue(carePlans), onPlantEdit, onCancel)
		);
	}
}

editPlantData(manager : MaterialManager, _plant : Plant, families : [Family], plantColors : [PlantColor], leafTypes : [LeafType], carePlans : [CarePlan], onSave : (Plant) -> void, onCancel : () -> void) -> Material {
	
	_plant_name = make(_plant.name);
	_plant_height = make(_plant.height |> i2s);
	_plant_familyId = make(_plant.familyId);
	familyId_families_id = make(findiDef(families, \p -> p.id == _plant.familyId, -1));
	familyId_families_id_unsubscribe_foreign = \ -> subscribe(familyId_families_id, \i -> if (i != -1) next(_plant_familyId, families[i].id));
	_plant_leafColorId = make(_plant.leafColorId);
	leafColorId_plantColors_id = make(findiDef(plantColors, \p -> p.id == _plant.leafColorId, -1));
	leafColorId_plantColors_id_unsubscribe_foreign = \ -> subscribe(leafColorId_plantColors_id, \i -> if (i != -1) next(_plant_leafColorId, plantColors[i].id));
	_plant_budColorId = make(_plant.budColorId);
	budColorId_plantColors_id = make(findiDef(plantColors, \p -> p.id == _plant.budColorId, -1));
	budColorId_plantColors_id_unsubscribe_foreign = \ -> subscribe(budColorId_plantColors_id, \i -> if (i != -1) next(_plant_budColorId, plantColors[i].id));
	_plant_leafTypeId = make(_plant.leafTypeId);
	leafTypeId_leafTypes_id = make(findiDef(leafTypes, \p -> p.id == _plant.leafTypeId, -1));
	leafTypeId_leafTypes_id_unsubscribe_foreign = \ -> subscribe(leafTypeId_leafTypes_id, \i -> if (i != -1) next(_plant_leafTypeId, leafTypes[i].id));
	_plant_carePlanId = make(_plant.carePlanId);
	carePlanId_carePlans_id = make(findiDef(carePlans, \p -> p.id == _plant.carePlanId, -1));
	carePlanId_carePlans_id_unsubscribe_foreign = \ -> subscribe(carePlanId_carePlans_id, \i -> if (i != -1) next(_plant_carePlanId, carePlans[i].id));

	_plant_actions = [
		MTextButton(_("CANCEL"), \ -> {onCancel()}, [MBlue(500)], [MShortcut("esc"), MEnabled(const(true))]),
		MTextButton(_("SAVE"), \ -> {onSave(Plant(_plant.id, _plant_name |> fgetValue, _plant_familyId |> fgetValue, _plant_leafColorId |> fgetValue, _plant_budColorId |> fgetValue, _plant_height |> fgetValue |> s2i, _plant_leafTypeId |> fgetValue, _plant_carePlanId |> fgetValue))}, [MBlue(500), MButtonRaised], [MShortcut(""), MEnabled(const(true))]),
	];

	_plant_view = MBorder(16.0, 16.0, 0.0, 0.0, 
		MLines([
			MText(_("Plant"), [MTitle]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("name", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_plant_name, [MLabel(_("Name")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MCols([
				MCenterYIn(MIcon("height", [MIconSize(standardIconSize * 1.5)]), TFixed(0.0, 72.0)),
				TFixed(16.0, 0.0),
				MTextInput(_plant_height, [MLabel(_("Height")), MWidth(400.0), MMaxLines(1),MFloatingLabel(), ], [])
			]),
			TFixed(0.0, 8.0),
			MConstruct([familyId_families_id_unsubscribe_foreign], 				MCols([
					MBorder(0., 18.0, 0., 0.0, MText(_("Family Id"), [])),
					TFixed(16.0, 0.0),
					getDropDownOrAutoComplete(familyId_families_id, map(families, \i -> i.name), false, None(), -1, _(""), [])
				])
			),
			TFixed(0.0, 8.0),
			MConstruct([leafColorId_plantColors_id_unsubscribe_foreign], 				MCols([
					MBorder(0., 18.0, 0., 0.0, MText(_("Leaf Color Id"), [])),
					TFixed(16.0, 0.0),
					getDropDownOrAutoComplete(leafColorId_plantColors_id, map(plantColors, \i -> i.name), false, None(), -1, _(""), [])
				])
			),
			TFixed(0.0, 8.0),
			MConstruct([budColorId_plantColors_id_unsubscribe_foreign], 				MCols([
					MBorder(0., 18.0, 0., 0.0, MText(_("Bud Color Id"), [])),
					TFixed(16.0, 0.0),
					getDropDownOrAutoComplete(budColorId_plantColors_id, map(plantColors, \i -> i.name), false, None(), -1, _(""), [])
				])
			),
			TFixed(0.0, 8.0),
			MConstruct([leafTypeId_leafTypes_id_unsubscribe_foreign], 				MCols([
					MBorder(0., 18.0, 0., 0.0, MText(_("Leaf Type Id"), [])),
					TFixed(16.0, 0.0),
					getDropDownOrAutoComplete(leafTypeId_leafTypes_id, map(leafTypes, \i -> i.name), false, None(), -1, _(""), [])
				])
			),
			TFixed(0.0, 8.0),
			MConstruct([carePlanId_carePlans_id_unsubscribe_foreign], 				MCols([
					MBorder(0., 18.0, 0., 0.0, MText(_("Care Plan Id"), [])),
					TFixed(16.0, 0.0),
					getDropDownOrAutoComplete(carePlanId_carePlans_id, map(carePlans, \i -> i.name), false, None(), -1, _(""), [])
				])
			)
	]));

	MLet("body", _plant_view,
		MLines([
			TDisplay("body"),
			TFixed(0.0, 16.0),
			MAvailable(
				MCols(concat([TFillXY()], _plant_actions)),
				TGroup2(
					TFixed(256.0, 0.0),
					TScale(const(Factor(1.0, 0.0)), TGhost("body"))
				)
			)
		])
	);
}

