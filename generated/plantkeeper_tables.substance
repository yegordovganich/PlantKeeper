// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import generated/plantkeeper_types;
import generated/plantkeeper_database;
import material/material;
import material/material_dialog;
import substantiate/subtable_styles;
import meta_app/utils;
import admin_panel/generated/admin_panel_tables;

export {
	FamilyTable(
			manager : MaterialManager,
			jwt : string, 
			families : DynamicBehaviour<[Family]>, 
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<Family, ?>]
		) -> Material;
	
	ColorTypeTable(
			manager : MaterialManager,
			jwt : string, 
			colorTypes : DynamicBehaviour<[ColorType]>, 
			plantColors : DynamicBehaviour<[PlantColor]>,
			style : [SubTableStyle<ColorType, ?>]
		) -> Material;
	
	PlantColorTable(
			manager : MaterialManager,
			jwt : string, 
			plantColors : DynamicBehaviour<[PlantColor]>, 
			colorTypes : DynamicBehaviour<[ColorType]>,
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<PlantColor, ?>]
		) -> Material;
	
	LeafTypeTable(
			manager : MaterialManager,
			jwt : string, 
			leafTypes : DynamicBehaviour<[LeafType]>, 
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<LeafType, ?>]
		) -> Material;
	
	CarePlanTable(
			manager : MaterialManager,
			jwt : string, 
			carePlans : DynamicBehaviour<[CarePlan]>, 
			plants : DynamicBehaviour<[Plant]>,
			style : [SubTableStyle<CarePlan, ?>]
		) -> Material;
	
	PlantTable(
			manager : MaterialManager,
			jwt : string, 
			plants : DynamicBehaviour<[Plant]>, 
			families : DynamicBehaviour<[Family]>,
			plantColors : DynamicBehaviour<[PlantColor]>,
			leafTypes : DynamicBehaviour<[LeafType]>,
			carePlans : DynamicBehaviour<[CarePlan]>,
			style : [SubTableStyle<Plant, ?>]
		) -> Material;
	
}

FamilyTable(manager : MaterialManager, jwt : string, families : DynamicBehaviour<[Family]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<Family, ?>]) -> Material {
	TABLE families {
		"Family"
		( .name )
		( .description )
		
		ADD onAddFamily(manager, jwt, families,  defaultFamily.fn, onAddHandler.fn, onError.fn);
		EDIT onEditFamily(manager, jwt, families, families_selectedIndex, onEdit.fn, onError.fn);
		DELETE table_references_plants(id, familyId);
	}
}

onAddFamily(manager : MaterialManager, jwt : string, families : DynamicBehaviour<[Family]>,  defaultFamily : () -> Family, callback : (Family) -> void, onError : (string) -> void) -> void {
	_family = defaultFamily();
	close = make(false);
	onAdd = \newFamily -> {
		insertFamily(jwt, newFamily, \id -> {
			newFamily2 = Family(id, newFamily.name, newFamily.description);
			dynArrayPush(families, newFamily2);
			callback(newFamily2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editFamilyData(manager, _family, onAdd, onCancel)
	);
}

onEditFamily(manager : MaterialManager, jwt : string, families : DynamicBehaviour<[Family]>, index : int, onEdit : (Family) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(families))) {
		close = make(false);
		onFamilyEdit = \editedFamily -> {
			if (onEdit(editedFamily)) {
	 			updateFamily(jwt, editedFamily, \ok -> {
					next(families, replace(getValue(families), index, editedFamily))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editFamilyData(manager, getValue(families)[index], onFamilyEdit, onCancel)
		);
	}
}

editFamilyData(manager : MaterialManager, _family : Family, onSave : (Family) -> void, onCancel : () -> void) -> Material {
	FORM _family {
		"Family"
		[ .name : name-icon ]
		[ .description : description-icon ]

		CANCEL onCancel();
		SAVE onSave(Family(.id, .name, .description));
	}
}

ColorTypeTable(manager : MaterialManager, jwt : string, colorTypes : DynamicBehaviour<[ColorType]>, plantColors : DynamicBehaviour<[PlantColor]>, style : [SubTableStyle<ColorType, ?>]) -> Material {
	TABLE colorTypes {
		"ColorType"
		( .name )
		
		ADD onAddColorType(manager, jwt, colorTypes,  defaultColorType.fn, onAddHandler.fn, onError.fn);
		EDIT onEditColorType(manager, jwt, colorTypes, colorTypes_selectedIndex, onEdit.fn, onError.fn);
		DELETE table_references_plantColors(id, colorTypeId);
	}
}

onAddColorType(manager : MaterialManager, jwt : string, colorTypes : DynamicBehaviour<[ColorType]>,  defaultColorType : () -> ColorType, callback : (ColorType) -> void, onError : (string) -> void) -> void {
	_colorType = defaultColorType();
	close = make(false);
	onAdd = \newColorType -> {
		insertColorType(jwt, newColorType, \id -> {
			newColorType2 = ColorType(id, newColorType.name);
			dynArrayPush(colorTypes, newColorType2);
			callback(newColorType2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editColorTypeData(manager, _colorType, onAdd, onCancel)
	);
}

onEditColorType(manager : MaterialManager, jwt : string, colorTypes : DynamicBehaviour<[ColorType]>, index : int, onEdit : (ColorType) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(colorTypes))) {
		close = make(false);
		onColorTypeEdit = \editedColorType -> {
			if (onEdit(editedColorType)) {
	 			updateColorType(jwt, editedColorType, \ok -> {
					next(colorTypes, replace(getValue(colorTypes), index, editedColorType))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editColorTypeData(manager, getValue(colorTypes)[index], onColorTypeEdit, onCancel)
		);
	}
}

editColorTypeData(manager : MaterialManager, _colorType : ColorType, onSave : (ColorType) -> void, onCancel : () -> void) -> Material {
	FORM _colorType {
		"ColorType"
		[ .name : name-icon ]

		CANCEL onCancel();
		SAVE onSave(ColorType(.id, .name));
	}
}

PlantColorTable(manager : MaterialManager, jwt : string, plantColors : DynamicBehaviour<[PlantColor]>, colorTypes : DynamicBehaviour<[ColorType]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<PlantColor, ?>]) -> Material {
	TABLE plantColors {
		"PlantColor"
		( .name )
		( .colorNumber )
		(\/ .colorTypeId FOREIGN colorTypes.id DETAIL (colorTypes.name) )
		
		ADD onAddPlantColor(manager, jwt, plantColors, colorTypes,  defaultPlantColor.fn, onAddHandler.fn, onError.fn);
		EDIT onEditPlantColor(manager, jwt, plantColors, colorTypes, plantColors_selectedIndex, onEdit.fn, onError.fn);
		DELETE table_references_plants(id, leafColorId ,id, budColorId);
	}
}

onAddPlantColor(manager : MaterialManager, jwt : string, plantColors : DynamicBehaviour<[PlantColor]>, colorTypes : DynamicBehaviour<[ColorType]>,  defaultPlantColor : () -> PlantColor, callback : (PlantColor) -> void, onError : (string) -> void) -> void {
	_plantColor = defaultPlantColor();
	close = make(false);
	onAdd = \newPlantColor -> {
		insertPlantColor(jwt, newPlantColor, \id -> {
			newPlantColor2 = PlantColor(id, newPlantColor.name, newPlantColor.colorNumber, newPlantColor.colorTypeId);
			dynArrayPush(plantColors, newPlantColor2);
			callback(newPlantColor2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editPlantColorData(manager, _plantColor, getValue(colorTypes), onAdd, onCancel)
	);
}

onEditPlantColor(manager : MaterialManager, jwt : string, plantColors : DynamicBehaviour<[PlantColor]>, colorTypes : DynamicBehaviour<[ColorType]>, index : int, onEdit : (PlantColor) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(plantColors))) {
		close = make(false);
		onPlantColorEdit = \editedPlantColor -> {
			if (onEdit(editedPlantColor)) {
	 			updatePlantColor(jwt, editedPlantColor, \ok -> {
					next(plantColors, replace(getValue(plantColors), index, editedPlantColor))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editPlantColorData(manager, getValue(plantColors)[index], getValue(colorTypes), onPlantColorEdit, onCancel)
		);
	}
}

editPlantColorData(manager : MaterialManager, _plantColor : PlantColor, colorTypes : [ColorType], onSave : (PlantColor) -> void, onCancel : () -> void) -> Material {
	FORM _plantColor {
		"PlantColor"
		[ .name : name-icon ]
		[ .colorNumber : color_number-icon ]
		[\/ .colorTypeId FOREIGN colorTypes.id DETAIL (colorTypes.name) ]

		CANCEL onCancel();
		SAVE onSave(PlantColor(.id, .name, .colorNumber, .colorTypeId));
	}
}

LeafTypeTable(manager : MaterialManager, jwt : string, leafTypes : DynamicBehaviour<[LeafType]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<LeafType, ?>]) -> Material {
	TABLE leafTypes {
		"LeafType"
		( .name )
		( .description )
		
		ADD onAddLeafType(manager, jwt, leafTypes,  defaultLeafType.fn, onAddHandler.fn, onError.fn);
		EDIT onEditLeafType(manager, jwt, leafTypes, leafTypes_selectedIndex, onEdit.fn, onError.fn);
		DELETE table_references_plants(id, leafTypeId);
	}
}

onAddLeafType(manager : MaterialManager, jwt : string, leafTypes : DynamicBehaviour<[LeafType]>,  defaultLeafType : () -> LeafType, callback : (LeafType) -> void, onError : (string) -> void) -> void {
	_leafType = defaultLeafType();
	close = make(false);
	onAdd = \newLeafType -> {
		insertLeafType(jwt, newLeafType, \id -> {
			newLeafType2 = LeafType(id, newLeafType.name, newLeafType.description);
			dynArrayPush(leafTypes, newLeafType2);
			callback(newLeafType2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editLeafTypeData(manager, _leafType, onAdd, onCancel)
	);
}

onEditLeafType(manager : MaterialManager, jwt : string, leafTypes : DynamicBehaviour<[LeafType]>, index : int, onEdit : (LeafType) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(leafTypes))) {
		close = make(false);
		onLeafTypeEdit = \editedLeafType -> {
			if (onEdit(editedLeafType)) {
	 			updateLeafType(jwt, editedLeafType, \ok -> {
					next(leafTypes, replace(getValue(leafTypes), index, editedLeafType))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editLeafTypeData(manager, getValue(leafTypes)[index], onLeafTypeEdit, onCancel)
		);
	}
}

editLeafTypeData(manager : MaterialManager, _leafType : LeafType, onSave : (LeafType) -> void, onCancel : () -> void) -> Material {
	FORM _leafType {
		"LeafType"
		[ .name : name-icon ]
		[ .description : description-icon ]

		CANCEL onCancel();
		SAVE onSave(LeafType(.id, .name, .description));
	}
}

CarePlanTable(manager : MaterialManager, jwt : string, carePlans : DynamicBehaviour<[CarePlan]>, plants : DynamicBehaviour<[Plant]>, style : [SubTableStyle<CarePlan, ?>]) -> Material {
	TABLE carePlans {
		"CarePlan"
		( .name )
		( .description )
		( .pour <-t double> <-c "How often you should pour the plant per week. 2 - two times per week, 0.5 - 1 time per two weeks"> <-s ""> )
		(-o .light <-c "0 - the plant prefers dark, 1 - light"> <-s ""> )
		( .turn <-t double> <-c "Period of turning plant around per week"> <-s ""> )
		( .tempreture <-t int> <-c "Prefered tempreture"> <-s ""> )
		( .spray <-t double> <-c "Period of spraying per week"> <-s ""> )
		( .wipeLeaves <-t double> <-c "Period of wiping leaves per week"> <-s ""> )
		
		ADD onAddCarePlan(manager, jwt, carePlans,  defaultCarePlan.fn, onAddHandler.fn, onError.fn);
		EDIT onEditCarePlan(manager, jwt, carePlans, carePlans_selectedIndex, onEdit.fn, onError.fn);
		DELETE table_references_plants(id, carePlanId);
	}
}

onAddCarePlan(manager : MaterialManager, jwt : string, carePlans : DynamicBehaviour<[CarePlan]>,  defaultCarePlan : () -> CarePlan, callback : (CarePlan) -> void, onError : (string) -> void) -> void {
	_carePlan = defaultCarePlan();
	close = make(false);
	onAdd = \newCarePlan -> {
		insertCarePlan(jwt, newCarePlan, \id -> {
			newCarePlan2 = CarePlan(id, newCarePlan.name, newCarePlan.description, newCarePlan.pour, newCarePlan.light, newCarePlan.turn, newCarePlan.tempreture, newCarePlan.spray, newCarePlan.wipeLeaves);
			dynArrayPush(carePlans, newCarePlan2);
			callback(newCarePlan2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editCarePlanData(manager, _carePlan, onAdd, onCancel)
	);
}

onEditCarePlan(manager : MaterialManager, jwt : string, carePlans : DynamicBehaviour<[CarePlan]>, index : int, onEdit : (CarePlan) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(carePlans))) {
		close = make(false);
		onCarePlanEdit = \editedCarePlan -> {
			if (onEdit(editedCarePlan)) {
	 			updateCarePlan(jwt, editedCarePlan, \ok -> {
					next(carePlans, replace(getValue(carePlans), index, editedCarePlan))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editCarePlanData(manager, getValue(carePlans)[index], onCarePlanEdit, onCancel)
		);
	}
}

editCarePlanData(manager : MaterialManager, _carePlan : CarePlan, onSave : (CarePlan) -> void, onCancel : () -> void) -> Material {
	FORM _carePlan {
		"CarePlan"
		[ .name : name-icon ]
		[ .description : description-icon ]
		[ .pour <-t double> <-c "How often you should pour the plant per week. 2 - two times per week, 0.5 - 1 time per two weeks"> <-s ""> : pour-icon ]
		[-o .light <-c "0 - the plant prefers dark, 1 - light"> <-s ""> ]
		[ .turn <-t double> <-c "Period of turning plant around per week"> <-s ""> : turn-icon ]
		[ .tempreture <-t int> <-c "Prefered tempreture"> <-s ""> : tempreture-icon ]
		[ .spray <-t double> <-c "Period of spraying per week"> <-s ""> : spray-icon ]
		[ .wipeLeaves <-t double> <-c "Period of wiping leaves per week"> <-s ""> : wipe_leaves-icon ]

		CANCEL onCancel();
		SAVE onSave(CarePlan(.id, .name, .description, .pour, .light, .turn, .tempreture, .spray, .wipeLeaves));
	}
}

PlantTable(manager : MaterialManager, jwt : string, plants : DynamicBehaviour<[Plant]>, families : DynamicBehaviour<[Family]>, plantColors : DynamicBehaviour<[PlantColor]>, leafTypes : DynamicBehaviour<[LeafType]>, carePlans : DynamicBehaviour<[CarePlan]>, style : [SubTableStyle<Plant, ?>]) -> Material {
	TABLE plants {
		"Plant"
		( .name )
		( .height <-t int> )
		(\/ .familyId FOREIGN families.id DETAIL (families.name) )
		(\/ .leafColorId FOREIGN plantColors.id DETAIL (plantColors.name) )
		(\/ .budColorId FOREIGN plantColors.id DETAIL (plantColors.name) )
		(\/ .leafTypeId FOREIGN leafTypes.id DETAIL (leafTypes.name) )
		(\/ .carePlanId FOREIGN carePlans.id DETAIL (carePlans.name) )
		
		ADD onAddPlant(manager, jwt, plants, families, plantColors, leafTypes, carePlans,  defaultPlant.fn, onAddHandler.fn, onError.fn);
		EDIT onEditPlant(manager, jwt, plants, families, plantColors, leafTypes, carePlans, plants_selectedIndex, onEdit.fn, onError.fn);
		DELETE;
	}
}

onAddPlant(manager : MaterialManager, jwt : string, plants : DynamicBehaviour<[Plant]>, families : DynamicBehaviour<[Family]>, plantColors : DynamicBehaviour<[PlantColor]>, leafTypes : DynamicBehaviour<[LeafType]>, carePlans : DynamicBehaviour<[CarePlan]>,  defaultPlant : () -> Plant, callback : (Plant) -> void, onError : (string) -> void) -> void {
	_plant = defaultPlant();
	close = make(false);
	onAdd = \newPlant -> {
		insertPlant(jwt, newPlant, \id -> {
			newPlant2 = Plant(id, newPlant.name, newPlant.familyId, newPlant.leafColorId, newPlant.budColorId, newPlant.height, newPlant.leafTypeId, newPlant.carePlanId);
			dynArrayPush(plants, newPlant2);
			callback(newPlant2)
		}, onError);
		next(close, true);
	}
	onCancel = \-> { next(close, true) };
	ShowMDialog(manager, close,
		[
			MDialogUseFrame(),
			MDialogScroll(),
		],
		editPlantData(manager, _plant, getValue(families), getValue(plantColors), getValue(leafTypes), getValue(carePlans), onAdd, onCancel)
	);
}

onEditPlant(manager : MaterialManager, jwt : string, plants : DynamicBehaviour<[Plant]>, families : DynamicBehaviour<[Family]>, plantColors : DynamicBehaviour<[PlantColor]>, leafTypes : DynamicBehaviour<[LeafType]>, carePlans : DynamicBehaviour<[CarePlan]>, index : int, onEdit : (Plant) -> bool, onError : (string) -> void) -> void {
	if (index > -1 && index < length(getValue(plants))) {
		close = make(false);
		onPlantEdit = \editedPlant -> {
			if (onEdit(editedPlant)) {
	 			updatePlant(jwt, editedPlant, \ok -> {
					next(plants, replace(getValue(plants), index, editedPlant))
				}, onError);
				next(close, true);
			}
		}
		onCancel = \-> { next(close, true) };
		ShowMDialog(manager, close,
			[
				MDialogUseFrame(),
				MDialogActions([]),
				MDialogScroll(),
			],
			editPlantData(manager, getValue(plants)[index], getValue(families), getValue(plantColors), getValue(leafTypes), getValue(carePlans), onPlantEdit, onCancel)
		);
	}
}

editPlantData(manager : MaterialManager, _plant : Plant, families : [Family], plantColors : [PlantColor], leafTypes : [LeafType], carePlans : [CarePlan], onSave : (Plant) -> void, onCancel : () -> void) -> Material {
	FORM _plant {
		"Plant"
		[ .name : name-icon ]
		[ .height <-t int> : height-icon ]
		[\/ .familyId FOREIGN families.id DETAIL (families.name) ]
		[\/ .leafColorId FOREIGN plantColors.id DETAIL (plantColors.name) ]
		[\/ .budColorId FOREIGN plantColors.id DETAIL (plantColors.name) ]
		[\/ .leafTypeId FOREIGN leafTypes.id DETAIL (leafTypes.name) ]
		[\/ .carePlanId FOREIGN carePlans.id DETAIL (carePlans.name) ]

		CANCEL onCancel();
		SAVE onSave(Plant(.id, .name, .familyId, .leafColorId, .budColorId, .height, .leafTypeId, .carePlanId));
	}
}

