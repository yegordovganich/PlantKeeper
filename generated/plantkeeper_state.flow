// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import material/material;
import meta_app/utils;
import material/material_manager;
import admin_panel/authentication/userinfo;

import oauth/oauth_tabs;
import admin_panel/admin_panel_tabs;
import drive/drive_tabs;
import generated/plantkeeper_dbstate;

export {
	// DB state  
	PlantkeeperElementsDbState : (
		oauthDbState : OauthDbState,
		adminPanelDbState : AdminPanelDbState,
		driveDbState : DriveDbState,
		plantkeeperDbState : PlantkeeperDbState,
		
	);

	loadPlantkeeperElementsDbState(jwt : string, nOK : (PlantkeeperElementsDbState) -> void, onError : (string) -> void) -> void;

	// Application state
	PlantkeeperState(
		userInfo : UserInfo,
		dbState : PlantkeeperElementsDbState,
		contentB : DynamicBehaviour<Material>,
		headerContentB : DynamicBehaviour<Material>,
		headerNameB : DynamicBehaviour<string>,
		contentStackB : DynamicBehaviour<[Pair<string, (PlantkeeperState) -> Material>]>,
		manager : MaterialManager
	);

	loadPlantkeeperState(userInfo : UserInfo, manager : MaterialManager, callback : (PlantkeeperState) -> void, onError : (string) -> void) -> void;

	// show content on screen
	replaceExistingPlantkeeperContent(state : PlantkeeperState, fromWhere : string, header : string, buildContentFn : (PlantkeeperState) -> Material) -> void;
	// show content on screen, add to content stack
	displayNewPlantkeeperContent(state : PlantkeeperState, fromWhere : string, header : string, buildContentFn : (PlantkeeperState) -> Material) -> void;
	// show error
	displayPlantkeeperError(state : PlantkeeperState, error : string) -> void;
	// show content from the stack, pop the stack
	displayPrevPlantkeeperContent(state : PlantkeeperState) -> void;

	// Standard views
	buildPlantkeeperAdminView(state : PlantkeeperState) -> Material;
}

// DB state
loadPlantkeeperElementsDbState(jwt : string, onOK : (PlantkeeperElementsDbState) -> void, onError : (string) -> void) -> void {

	oauthPromise = 
		Promise(\fulfill, reject -> {
			loadOauthDbState(jwt, fulfill, reject)
		});

	admin_panelPromise = 
		Promise(\fulfill, reject -> {
			loadAdminPanelDbState(jwt, fulfill, reject)
		});

	drivePromise = 
		Promise(\fulfill, reject -> {
			loadDriveDbState(jwt, fulfill, reject)
		});

	plantkeeperPromise = 
		Promise(\fulfill, reject -> {
			loadPlantkeeperDbState(jwt, fulfill, reject)
		});

	promises = [oauthPromise, admin_panelPromise, drivePromise, plantkeeperPromise, ];

	doneP(parallelP(promises),
		\results : flow -> { // Typing is hard. Forgive us
			PlantkeeperElementsDbState(results[0], results[1], results[2], results[3], ) |> onOK
		},
		onError
	)
}

// Application state
loadPlantkeeperState(userInfo : UserInfo, manager : MaterialManager, callback : (PlantkeeperState) -> void, onError : (string) -> void) -> void {
	dbStatePromise =
		Promise(\fulfill, reject -> {
			loadPlantkeeperElementsDbState(userInfo.jwt, fulfill, reject);
		});

	promises = [dbStatePromise];

	doneP(parallelP(promises), 
		\results : flow -> { // Typing is hard. Forgive us
			PlantkeeperState(userInfo, results[0], make(TEmpty()), make(TEmpty()), make(""), make([]), manager) |> callback
		},
		onError
	)
}

replaceExistingPlantkeeperContent(state : PlantkeeperState, fromWhere : string, header : string, buildContentFn : (PlantkeeperState) -> Material) -> void {
	material = buildContentFn(state);
	next(state.contentB, material);
	next(state.headerNameB, header);
}

displayNewPlantkeeperContent(state : PlantkeeperState, fromWhere : string, header : string, buildContentFn : (PlantkeeperState) -> Material) -> void {
	replaceExistingPlantkeeperContent(state, fromWhere, header, buildContentFn);

	contentStack = getValue(state.contentStackB);
	next(state.contentStackB, arrayPush(contentStack, Pair(header, buildContentFn)));
}

displayPlantkeeperError(state : PlantkeeperState, error : string) -> void {
	contentStack = getValue(state.contentStackB);
	
	if (length(contentStack) > 1) {
		replaceExistingPlantkeeperContent(state, "Error", "", \__ ->
			ProcessErrorMessage(error, \ -> {
				displayPrevPlantkeeperContent(state)
			})
		)
	} else {
		displayNewPlantkeeperContent(state, "Error", "", \__ ->
			ProcessErrorMessage(error, \ -> {
				displayPrevPlantkeeperContent(state)
			})
		)
	}
}

displayPrevPlantkeeperContent(state : PlantkeeperState) -> void {
	contentStack = getValue(state.contentStackB);
	// pop last element
	if (length(contentStack) > 1) {
		unpair(contentStack[length(contentStack) - 2], \prevHeaderName, prevContentFn -> {
			newContentStack = subrange(contentStack, 0, length(contentStack) - 1);
			next(state.contentStackB, newContentStack);
			// show prev content
			replaceExistingPlantkeeperContent(state, "Prev", prevHeaderName, prevContentFn)
		})
	}
}

// Standart views
buildPlantkeeperAdminView(state : PlantkeeperState) -> Material {
	tables = [
		// oauth
		buildAdminTabsForOauth(
			state.manager,
			state.userInfo,
			state.dbState.oauthDbState
		),
		// admin_panel
		buildAdminTabsForAdminPanel(
			state.manager,
			state.userInfo,
			state.dbState.adminPanelDbState,
			state.dbState.oauthDbState
		),
		// drive
		buildAdminTabsForDrive(
			state.manager,
			state.userInfo,
			state.dbState.driveDbState,
			state.dbState.oauthDbState,
			state.dbState.adminPanelDbState
		),
		
	] |> concatA;

	tables2tabs(tables)
}

ProcessErrorMessage(text : string, onClose : () -> void) -> Material {
	MCenter(
		MLines([
			MText("Something went wrong. Contact developers.", []),
			TFixed(8.0, 8.0),
			MParagraph("Details: " + text, [MWidth(400.0)]),
			TFixed(8.0, 8.0),
			MTextButton("CLOSE", onClose, [], [])
		])
	)
}
