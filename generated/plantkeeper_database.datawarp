// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import generated/plantkeeper_types;
import oauth/datawarp/datawarp;

export {
	loadFamilys(jwt : string, onOK : ([Family]) -> void, onError : (string) -> void) -> void;
	loadFamily(jwt : string, id : int, onOK : (Family) -> void, onError : (string) -> void) -> void;
	insertFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadColors(jwt : string, onOK : ([Color]) -> void, onError : (string) -> void) -> void;
	loadColor(jwt : string, id : int, onOK : (Color) -> void, onError : (string) -> void) -> void;
	insertColor(jwt : string, val : Color, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateColor(jwt : string, val : Color, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteColor(jwt : string, val : Color, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadLeafTypes(jwt : string, onOK : ([LeafType]) -> void, onError : (string) -> void) -> void;
	loadLeafType(jwt : string, id : int, onOK : (LeafType) -> void, onError : (string) -> void) -> void;
	insertLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadCarePlans(jwt : string, onOK : ([CarePlan]) -> void, onError : (string) -> void) -> void;
	loadCarePlan(jwt : string, id : int, onOK : (CarePlan) -> void, onError : (string) -> void) -> void;
	insertCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadPlants(jwt : string, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlant(jwt : string, id : int, onOK : (Plant) -> void, onError : (string) -> void) -> void;
	loadPlantsByFamilyId(jwt : string, familieId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByLeafColorId(jwt : string, colorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByBudColorId(jwt : string, colorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByLeafTypeId(jwt : string, leafTypeId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByCarePlanId(jwt : string, carePlanId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	insertPlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void;
	updatePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void;
	deletePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void;
	
}

loadFamilys(jwt : string, onOK : ([Family]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT families.`id` AS `families_id`, families.`name` AS `families_name`, families.`description` AS `families_description`
	FROM families
	;

	COLLECT Family(`families_id` : int, `families_name` : string, `families_description` : string);
}

loadFamily(jwt : string, id : int, onOK : (Family) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT families.`id` AS `id`, families.`name` AS `name`, families.`description` AS `description` FROM families
	WHERE families.`id` = $(id) 
	;

	RETURN Family(`id` : int, `name` : string, `description` : string);
}


insertFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	INSERT INTO families (`name`, `description`)
	VALUES ($(val.name), $(val.description));
	SELECT LAST_INSERT_ID() AS id;
	RETURN `id` : int;
}


updateFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	UPDATE families SET `name` = $(val.name), `description` = $(val.description)
	WHERE `id` = $(val.id)
	;

	RETURN 1;
}

deleteFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	DELETE FROM families
	WHERE `id` = $(val.id)
	;
	RETURN 1;
}

loadColors(jwt : string, onOK : ([Color]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT colors.`id` AS `colors_id`, colors.`color` AS `colors_color`, colors.`leaf` AS `colors_leaf`
	FROM colors
	;

	COLLECT Color(`colors_id` : int, `colors_color` : int, `colors_leaf` : bool);
}

loadColor(jwt : string, id : int, onOK : (Color) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT colors.`id` AS `id`, colors.`color` AS `color`, colors.`leaf` AS `leaf` FROM colors
	WHERE colors.`id` = $(id) 
	;

	RETURN Color(`id` : int, `color` : int, `leaf` : bool);
}


insertColor(jwt : string, val : Color, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	INSERT INTO colors (`color`, `leaf`)
	VALUES ($(val.color), $(val.leaf |> b2i));
	SELECT LAST_INSERT_ID() AS id;
	RETURN `id` : int;
}


updateColor(jwt : string, val : Color, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	UPDATE colors SET `color` = $(val.color), `leaf` = $(val.leaf |> b2i)
	WHERE `id` = $(val.id)
	;

	RETURN 1;
}

deleteColor(jwt : string, val : Color, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	DELETE FROM colors
	WHERE `id` = $(val.id)
	;
	RETURN 1;
}

loadLeafTypes(jwt : string, onOK : ([LeafType]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT leaf_types.`id` AS `leaf_types_id`, leaf_types.`name` AS `leaf_types_name`, leaf_types.`description` AS `leaf_types_description`
	FROM leaf_types
	;

	COLLECT LeafType(`leaf_types_id` : int, `leaf_types_name` : string, `leaf_types_description` : string);
}

loadLeafType(jwt : string, id : int, onOK : (LeafType) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT leaf_types.`id` AS `id`, leaf_types.`name` AS `name`, leaf_types.`description` AS `description` FROM leaf_types
	WHERE leaf_types.`id` = $(id) 
	;

	RETURN LeafType(`id` : int, `name` : string, `description` : string);
}


insertLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	INSERT INTO leaf_types (`name`, `description`)
	VALUES ($(val.name), $(val.description));
	SELECT LAST_INSERT_ID() AS id;
	RETURN `id` : int;
}


updateLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	UPDATE leaf_types SET `name` = $(val.name), `description` = $(val.description)
	WHERE `id` = $(val.id)
	;

	RETURN 1;
}

deleteLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	DELETE FROM leaf_types
	WHERE `id` = $(val.id)
	;
	RETURN 1;
}

loadCarePlans(jwt : string, onOK : ([CarePlan]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT care_plans.`id` AS `care_plans_id`, care_plans.`name` AS `care_plans_name`, care_plans.`description` AS `care_plans_description`, care_plans.`pour` AS `care_plans_pour`, care_plans.`light` AS `care_plans_light`, care_plans.`turn` AS `care_plans_turn`, care_plans.`tempreture` AS `care_plans_tempreture`, care_plans.`spray` AS `care_plans_spray`, care_plans.`wipe_leaves` AS `care_plans_wipeLeaves`
	FROM care_plans
	;

	COLLECT CarePlan(`care_plans_id` : int, `care_plans_name` : string, `care_plans_description` : string, `care_plans_pour` : double, `care_plans_light` : bool, `care_plans_turn` : double, `care_plans_tempreture` : int, `care_plans_spray` : double, `care_plans_wipeLeaves` : double);
}

loadCarePlan(jwt : string, id : int, onOK : (CarePlan) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT care_plans.`id` AS `id`, care_plans.`name` AS `name`, care_plans.`description` AS `description`, care_plans.`pour` AS `pour`, care_plans.`light` AS `light`, care_plans.`turn` AS `turn`, care_plans.`tempreture` AS `tempreture`, care_plans.`spray` AS `spray`, care_plans.`wipe_leaves` AS `wipeLeaves` FROM care_plans
	WHERE care_plans.`id` = $(id) 
	;

	RETURN CarePlan(`id` : int, `name` : string, `description` : string, `pour` : double, `light` : bool, `turn` : double, `tempreture` : int, `spray` : double, `wipeLeaves` : double);
}


insertCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	INSERT INTO care_plans (`name`, `description`, `pour`, `light`, `turn`, `tempreture`, `spray`, `wipe_leaves`)
	VALUES ($(val.name), $(val.description), $(val.pour), $(val.light |> b2i), $(val.turn), $(val.tempreture), $(val.spray), $(val.wipeLeaves));
	SELECT LAST_INSERT_ID() AS id;
	RETURN `id` : int;
}


updateCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	UPDATE care_plans SET `name` = $(val.name), `description` = $(val.description), `pour` = $(val.pour), `light` = $(val.light |> b2i), `turn` = $(val.turn), `tempreture` = $(val.tempreture), `spray` = $(val.spray), `wipe_leaves` = $(val.wipeLeaves)
	WHERE `id` = $(val.id)
	;

	RETURN 1;
}

deleteCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	DELETE FROM care_plans
	WHERE `id` = $(val.id)
	;
	RETURN 1;
}

loadPlants(jwt : string, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `plants_id`, plants.`name` AS `plants_name`, plants.`family_id` AS `plants_familyId`, plants.`leaf_color_id` AS `plants_leafColorId`, plants.`bud_color_id` AS `plants_budColorId`, plants.`height` AS `plants_height`, plants.`leaf_type_id` AS `plants_leafTypeId`, plants.`care_plan_id` AS `plants_carePlanId`
	FROM plants
	;

	COLLECT Plant(`plants_id` : int, `plants_name` : string, `plants_familyId` : int, `plants_leafColorId` : int, `plants_budColorId` : int, `plants_height` : int, `plants_leafTypeId` : int, `plants_carePlanId` : int);
}

loadPlant(jwt : string, id : int, onOK : (Plant) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `id`, plants.`name` AS `name`, plants.`family_id` AS `familyId`, plants.`leaf_color_id` AS `leafColorId`, plants.`bud_color_id` AS `budColorId`, plants.`height` AS `height`, plants.`leaf_type_id` AS `leafTypeId`, plants.`care_plan_id` AS `carePlanId` FROM plants
	WHERE plants.`id` = $(id) 
	;

	RETURN Plant(`id` : int, `name` : string, `familyId` : int, `leafColorId` : int, `budColorId` : int, `height` : int, `leafTypeId` : int, `carePlanId` : int);
}

loadPlantsByFamilyId(jwt : string, familieId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `plants_id`, plants.`name` AS `plants_name`, plants.`family_id` AS `plants_familyId`, plants.`leaf_color_id` AS `plants_leafColorId`, plants.`bud_color_id` AS `plants_budColorId`, plants.`height` AS `plants_height`, plants.`leaf_type_id` AS `plants_leafTypeId`, plants.`care_plan_id` AS `plants_carePlanId` FROM plants
	WHERE plants.`family_id` = $(familieId) 
	;

	COLLECT Plant(`plants_id` : int, `plants_name` : string, `plants_familyId` : int, `plants_leafColorId` : int, `plants_budColorId` : int, `plants_height` : int, `plants_leafTypeId` : int, `plants_carePlanId` : int);
}

loadPlantsByLeafColorId(jwt : string, colorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `plants_id`, plants.`name` AS `plants_name`, plants.`family_id` AS `plants_familyId`, plants.`leaf_color_id` AS `plants_leafColorId`, plants.`bud_color_id` AS `plants_budColorId`, plants.`height` AS `plants_height`, plants.`leaf_type_id` AS `plants_leafTypeId`, plants.`care_plan_id` AS `plants_carePlanId` FROM plants
	WHERE plants.`leaf_color_id` = $(colorId) 
	;

	COLLECT Plant(`plants_id` : int, `plants_name` : string, `plants_familyId` : int, `plants_leafColorId` : int, `plants_budColorId` : int, `plants_height` : int, `plants_leafTypeId` : int, `plants_carePlanId` : int);
}

loadPlantsByBudColorId(jwt : string, colorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `plants_id`, plants.`name` AS `plants_name`, plants.`family_id` AS `plants_familyId`, plants.`leaf_color_id` AS `plants_leafColorId`, plants.`bud_color_id` AS `plants_budColorId`, plants.`height` AS `plants_height`, plants.`leaf_type_id` AS `plants_leafTypeId`, plants.`care_plan_id` AS `plants_carePlanId` FROM plants
	WHERE plants.`bud_color_id` = $(colorId) 
	;

	COLLECT Plant(`plants_id` : int, `plants_name` : string, `plants_familyId` : int, `plants_leafColorId` : int, `plants_budColorId` : int, `plants_height` : int, `plants_leafTypeId` : int, `plants_carePlanId` : int);
}

loadPlantsByLeafTypeId(jwt : string, leafTypeId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `plants_id`, plants.`name` AS `plants_name`, plants.`family_id` AS `plants_familyId`, plants.`leaf_color_id` AS `plants_leafColorId`, plants.`bud_color_id` AS `plants_budColorId`, plants.`height` AS `plants_height`, plants.`leaf_type_id` AS `plants_leafTypeId`, plants.`care_plan_id` AS `plants_carePlanId` FROM plants
	WHERE plants.`leaf_type_id` = $(leafTypeId) 
	;

	COLLECT Plant(`plants_id` : int, `plants_name` : string, `plants_familyId` : int, `plants_leafColorId` : int, `plants_budColorId` : int, `plants_height` : int, `plants_leafTypeId` : int, `plants_carePlanId` : int);
}

loadPlantsByCarePlanId(jwt : string, carePlanId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	SELECT plants.`id` AS `plants_id`, plants.`name` AS `plants_name`, plants.`family_id` AS `plants_familyId`, plants.`leaf_color_id` AS `plants_leafColorId`, plants.`bud_color_id` AS `plants_budColorId`, plants.`height` AS `plants_height`, plants.`leaf_type_id` AS `plants_leafTypeId`, plants.`care_plan_id` AS `plants_carePlanId` FROM plants
	WHERE plants.`care_plan_id` = $(carePlanId) 
	;

	COLLECT Plant(`plants_id` : int, `plants_name` : string, `plants_familyId` : int, `plants_leafColorId` : int, `plants_budColorId` : int, `plants_height` : int, `plants_leafTypeId` : int, `plants_carePlanId` : int);
}

insertPlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	INSERT INTO plants (`name`, `family_id`, `leaf_color_id`, `bud_color_id`, `height`, `leaf_type_id`, `care_plan_id`)
	VALUES ($(val.name), $(val.familyId), $(val.leafColorId), $(val.budColorId), $(val.height), $(val.leafTypeId), $(val.carePlanId));
	SELECT LAST_INSERT_ID() AS id;
	RETURN `id` : int;
}


updatePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	UPDATE plants SET `name` = $(val.name), `family_id` = $(val.familyId), `leaf_color_id` = $(val.leafColorId), `bud_color_id` = $(val.budColorId), `height` = $(val.height), `leaf_type_id` = $(val.leafTypeId), `care_plan_id` = $(val.carePlanId)
	WHERE `id` = $(val.id)
	;

	RETURN 1;
}

deletePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	DELETE FROM plants
	WHERE `id` = $(val.id)
	;
	RETURN 1;
}

