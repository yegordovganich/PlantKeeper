// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import generated/plantkeeper_state;
import meta_app/utils;

export {
	buildPlantkeeperHomeView(state : PlantkeeperState) -> Material;
}

buildPlantkeeperHomeView(state : PlantkeeperState) -> Material {
	tables = [
		// oauth
		buildTabsForOauth(
			state.manager,
			state.userInfo,
			state.dbState.oauthDbState
		),
		// admin_panel
		buildTabsForAdminPanel(
			state.manager,
			state.userInfo,
			state.dbState.adminPanelDbState,
			state.dbState.oauthDbState
		),
		// drive
		buildTabsForDrive(
			state.manager,
			state.userInfo,
			state.dbState.driveDbState,
			state.dbState.oauthDbState,
			state.dbState.adminPanelDbState
		),
		// plantkeeper
		[
			Pair("Families", buildFamilyTable(
				state.manager,
				state.userInfo.jwt,
				state.dbState.plantkeeperDbState,
				[
					SubTableDefaultValue(makeFamily),
					SubTableAllowEdit(true)
				]
			)),
			Pair("Colors", buildColorTable(
				state.manager,
				state.userInfo.jwt,
				state.dbState.plantkeeperDbState,
				[
					SubTableDefaultValue(makeColor),
					SubTableAllowEdit(true)
				]
			)),
			Pair("Leaf Types", buildLeafTypeTable(
				state.manager,
				state.userInfo.jwt,
				state.dbState.plantkeeperDbState,
				[
					SubTableDefaultValue(makeLeafType),
					SubTableAllowEdit(true)
				]
			)),
			Pair("Care Plans", buildCarePlanTable(
				state.manager,
				state.userInfo.jwt,
				state.dbState.plantkeeperDbState,
				[
					SubTableDefaultValue(makeCarePlan),
					SubTableAllowEdit(true)
				]
			)),
			Pair("Plants", buildPlantTable(
				state.manager,
				state.userInfo.jwt,
				state.dbState.plantkeeperDbState,
				[
					SubTableDefaultValue(makePlant),
					SubTableAllowEdit(true)
				]
			)),
		],
	] |> concatA;

	tables2tabs(tables)
}
