// Auto-generated by datawarp compiler from generated/plantkeeper_database.datawarp
// flowcpp datawarp_compiler.flow -- file=generated/plantkeeper_database.datawarp flowfile=generated/plantkeeper_database.flow baseurl=/php/ phppage=plantkeeper_database.php wwwfolder=www/php/ requestfn=oauthDatawarpRequest 
import formats/json/json;
import flowutils;
import http;
// Auto-generated by substantiate from sql/plantkeeper.sql
forbid plantkeeper/config;
import generated/plantkeeper_types;
import oauth/datawarp/datawarp;

export {
	loadFamilys(jwt : string, onOK : ([Family]) -> void, onError : (string) -> void) -> void;
	loadFamily(jwt : string, id : int, onOK : (Family) -> void, onError : (string) -> void) -> void;
	insertFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadColorTypes(jwt : string, onOK : ([ColorType]) -> void, onError : (string) -> void) -> void;
	loadColorType(jwt : string, id : int, onOK : (ColorType) -> void, onError : (string) -> void) -> void;
	insertColorType(jwt : string, val : ColorType, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateColorType(jwt : string, val : ColorType, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteColorType(jwt : string, val : ColorType, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadPlantColors(jwt : string, onOK : ([PlantColor]) -> void, onError : (string) -> void) -> void;
	loadPlantColor(jwt : string, id : int, onOK : (PlantColor) -> void, onError : (string) -> void) -> void;
	loadPlantColorsByColorTypeId(jwt : string, colorTypeId : int, onOK : ([PlantColor]) -> void, onError : (string) -> void) -> void;
	insertPlantColor(jwt : string, val : PlantColor, onOK : (int) -> void, onError : (string) -> void) -> void;
	updatePlantColor(jwt : string, val : PlantColor, onOK : (int) -> void, onError : (string) -> void) -> void;
	deletePlantColor(jwt : string, val : PlantColor, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadLeafTypes(jwt : string, onOK : ([LeafType]) -> void, onError : (string) -> void) -> void;
	loadLeafType(jwt : string, id : int, onOK : (LeafType) -> void, onError : (string) -> void) -> void;
	insertLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadCarePlans(jwt : string, onOK : ([CarePlan]) -> void, onError : (string) -> void) -> void;
	loadCarePlan(jwt : string, id : int, onOK : (CarePlan) -> void, onError : (string) -> void) -> void;
	insertCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void;
	updateCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void;
	deleteCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void;
	
	loadPlants(jwt : string, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlant(jwt : string, id : int, onOK : (Plant) -> void, onError : (string) -> void) -> void;
	loadPlantsByFamilyId(jwt : string, familieId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByLeafColorId(jwt : string, plantColorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByBudColorId(jwt : string, plantColorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByLeafTypeId(jwt : string, leafTypeId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	loadPlantsByCarePlanId(jwt : string, carePlanId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void;
	insertPlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void;
	updatePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void;
	deletePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void;
	
}

loadFamilys(jwt : string, onOK : ([Family]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadFamilys") ], 
		
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Family(_ji(arr.second, "0")  /* families_id */ , _js(arr.second, "1")  /* families_name */ , _js(arr.second, "2")  /* families_description */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadFamily(jwt : string, id : int, onOK : (Family) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadFamily") ], 
		buildKeyValueForPhp("a0", (id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(0); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(
					Family(_ji(_j0(0), "0")  /* id */ , _js(_j0(0), "1")  /* name */ , _js(_j0(0), "2")  /* description */ )
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


insertFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "insertFamily") ], 
		buildKeyValueForPhp("a0", (val.name)),
		buildKeyValueForPhp("a1", (val.description)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 2) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(1); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(_ji(_j0(1), "0")  /* id */ );
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


updateFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "updateFamily") ], 
		buildKeyValueForPhp("a0", (val.id)),
		buildKeyValueForPhp("a1", (val.name)),
		buildKeyValueForPhp("a2", (val.description)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

deleteFamily(jwt : string, val : Family, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "deleteFamily") ], 
		buildKeyValueForPhp("a0", (val.id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadColorTypes(jwt : string, onOK : ([ColorType]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadColorTypes") ], 
		
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { ColorType(_ji(arr.second, "0")  /* color_types_id */ , _js(arr.second, "1")  /* color_types_name */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadColorType(jwt : string, id : int, onOK : (ColorType) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadColorType") ], 
		buildKeyValueForPhp("a0", (id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(0); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(
					ColorType(_ji(_j0(0), "0")  /* id */ , _js(_j0(0), "1")  /* name */ )
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


insertColorType(jwt : string, val : ColorType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "insertColorType") ], 
		buildKeyValueForPhp("a0", (val.name)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 2) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(1); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(_ji(_j0(1), "0")  /* id */ );
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


updateColorType(jwt : string, val : ColorType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "updateColorType") ], 
		buildKeyValueForPhp("a0", (val.id)),
		buildKeyValueForPhp("a1", (val.name)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

deleteColorType(jwt : string, val : ColorType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "deleteColorType") ], 
		buildKeyValueForPhp("a0", (val.id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantColors(jwt : string, onOK : ([PlantColor]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantColors") ], 
		
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { PlantColor(_ji(arr.second, "0")  /* plant_colors_id */ , _js(arr.second, "1")  /* plant_colors_name */ , _js(arr.second, "2")  /* plant_colors_colorNumber */ , _ji(arr.second, "3")  /* plant_colors_colorTypeId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantColor(jwt : string, id : int, onOK : (PlantColor) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantColor") ], 
		buildKeyValueForPhp("a0", (id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(0); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(
					PlantColor(_ji(_j0(0), "0")  /* id */ , _js(_j0(0), "1")  /* name */ , _js(_j0(0), "2")  /* colorNumber */ , _ji(_j0(0), "3")  /* colorTypeId */ )
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantColorsByColorTypeId(jwt : string, colorTypeId : int, onOK : ([PlantColor]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantColorsByColorTypeId") ], 
		buildKeyValueForPhp("a0", (colorTypeId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { PlantColor(_ji(arr.second, "0")  /* plant_colors_id */ , _js(arr.second, "1")  /* plant_colors_name */ , _js(arr.second, "2")  /* plant_colors_colorNumber */ , _ji(arr.second, "3")  /* plant_colors_colorTypeId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

insertPlantColor(jwt : string, val : PlantColor, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "insertPlantColor") ], 
		buildKeyValueForPhp("a0", (val.name)),
		buildKeyValueForPhp("a1", (val.colorNumber)),
		buildKeyValueForPhp("a2", (val.colorTypeId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 2) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(1); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(_ji(_j0(1), "0")  /* id */ );
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


updatePlantColor(jwt : string, val : PlantColor, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "updatePlantColor") ], 
		buildKeyValueForPhp("a0", (val.id)),
		buildKeyValueForPhp("a1", (val.name)),
		buildKeyValueForPhp("a2", (val.colorNumber)),
		buildKeyValueForPhp("a3", (val.colorTypeId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

deletePlantColor(jwt : string, val : PlantColor, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "deletePlantColor") ], 
		buildKeyValueForPhp("a0", (val.id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadLeafTypes(jwt : string, onOK : ([LeafType]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadLeafTypes") ], 
		
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { LeafType(_ji(arr.second, "0")  /* leaf_types_id */ , _js(arr.second, "1")  /* leaf_types_name */ , _js(arr.second, "2")  /* leaf_types_description */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadLeafType(jwt : string, id : int, onOK : (LeafType) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadLeafType") ], 
		buildKeyValueForPhp("a0", (id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(0); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(
					LeafType(_ji(_j0(0), "0")  /* id */ , _js(_j0(0), "1")  /* name */ , _js(_j0(0), "2")  /* description */ )
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


insertLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "insertLeafType") ], 
		buildKeyValueForPhp("a0", (val.name)),
		buildKeyValueForPhp("a1", (val.description)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 2) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(1); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(_ji(_j0(1), "0")  /* id */ );
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


updateLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "updateLeafType") ], 
		buildKeyValueForPhp("a0", (val.id)),
		buildKeyValueForPhp("a1", (val.name)),
		buildKeyValueForPhp("a2", (val.description)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

deleteLeafType(jwt : string, val : LeafType, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "deleteLeafType") ], 
		buildKeyValueForPhp("a0", (val.id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadCarePlans(jwt : string, onOK : ([CarePlan]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadCarePlans") ], 
		
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { CarePlan(_ji(arr.second, "0")  /* care_plans_id */ , _js(arr.second, "1")  /* care_plans_name */ , _js(arr.second, "2")  /* care_plans_description */ , _jd(arr.second, "3")  /* care_plans_pour */ , _jb(arr.second, "4")  /* care_plans_light */ , _jd(arr.second, "5")  /* care_plans_turn */ , _ji(arr.second, "6")  /* care_plans_tempreture */ , _jd(arr.second, "7")  /* care_plans_spray */ , _jd(arr.second, "8")  /* care_plans_wipeLeaves */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadCarePlan(jwt : string, id : int, onOK : (CarePlan) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadCarePlan") ], 
		buildKeyValueForPhp("a0", (id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(0); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(
					CarePlan(_ji(_j0(0), "0")  /* id */ , _js(_j0(0), "1")  /* name */ , _js(_j0(0), "2")  /* description */ , _jd(_j0(0), "3")  /* pour */ , _jb(_j0(0), "4")  /* light */ , _jd(_j0(0), "5")  /* turn */ , _ji(_j0(0), "6")  /* tempreture */ , _jd(_j0(0), "7")  /* spray */ , _jd(_j0(0), "8")  /* wipeLeaves */ )
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


insertCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "insertCarePlan") ], 
		buildKeyValueForPhp("a0", (val.name)),
		buildKeyValueForPhp("a1", (val.description)),
		buildKeyValueForPhp("a2", (val.pour)),
		buildKeyValueForPhp("a3", (val.light |> b2i)),
		buildKeyValueForPhp("a4", (val.turn)),
		buildKeyValueForPhp("a5", (val.tempreture)),
		buildKeyValueForPhp("a6", (val.spray)),
		buildKeyValueForPhp("a7", (val.wipeLeaves)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 2) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(1); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(_ji(_j0(1), "0")  /* id */ );
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


updateCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "updateCarePlan") ], 
		buildKeyValueForPhp("a0", (val.id)),
		buildKeyValueForPhp("a1", (val.name)),
		buildKeyValueForPhp("a2", (val.description)),
		buildKeyValueForPhp("a3", (val.pour)),
		buildKeyValueForPhp("a4", (val.light |> b2i)),
		buildKeyValueForPhp("a5", (val.turn)),
		buildKeyValueForPhp("a6", (val.tempreture)),
		buildKeyValueForPhp("a7", (val.spray)),
		buildKeyValueForPhp("a8", (val.wipeLeaves)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

deleteCarePlan(jwt : string, val : CarePlan, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "deleteCarePlan") ], 
		buildKeyValueForPhp("a0", (val.id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlants(jwt : string, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlants") ], 
		
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Plant(_ji(arr.second, "0")  /* plants_id */ , _js(arr.second, "1")  /* plants_name */ , _ji(arr.second, "2")  /* plants_familyId */ , _ji(arr.second, "3")  /* plants_leafColorId */ , _ji(arr.second, "4")  /* plants_budColorId */ , _ji(arr.second, "5")  /* plants_height */ , _ji(arr.second, "6")  /* plants_leafTypeId */ , _ji(arr.second, "7")  /* plants_carePlanId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlant(jwt : string, id : int, onOK : (Plant) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlant") ], 
		buildKeyValueForPhp("a0", (id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(0); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(
					Plant(_ji(_j0(0), "0")  /* id */ , _js(_j0(0), "1")  /* name */ , _ji(_j0(0), "2")  /* familyId */ , _ji(_j0(0), "3")  /* leafColorId */ , _ji(_j0(0), "4")  /* budColorId */ , _ji(_j0(0), "5")  /* height */ , _ji(_j0(0), "6")  /* leafTypeId */ , _ji(_j0(0), "7")  /* carePlanId */ )
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantsByFamilyId(jwt : string, familieId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantsByFamilyId") ], 
		buildKeyValueForPhp("a0", (familieId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Plant(_ji(arr.second, "0")  /* plants_id */ , _js(arr.second, "1")  /* plants_name */ , _ji(arr.second, "2")  /* plants_familyId */ , _ji(arr.second, "3")  /* plants_leafColorId */ , _ji(arr.second, "4")  /* plants_budColorId */ , _ji(arr.second, "5")  /* plants_height */ , _ji(arr.second, "6")  /* plants_leafTypeId */ , _ji(arr.second, "7")  /* plants_carePlanId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantsByLeafColorId(jwt : string, plantColorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantsByLeafColorId") ], 
		buildKeyValueForPhp("a0", (plantColorId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Plant(_ji(arr.second, "0")  /* plants_id */ , _js(arr.second, "1")  /* plants_name */ , _ji(arr.second, "2")  /* plants_familyId */ , _ji(arr.second, "3")  /* plants_leafColorId */ , _ji(arr.second, "4")  /* plants_budColorId */ , _ji(arr.second, "5")  /* plants_height */ , _ji(arr.second, "6")  /* plants_leafTypeId */ , _ji(arr.second, "7")  /* plants_carePlanId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantsByBudColorId(jwt : string, plantColorId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantsByBudColorId") ], 
		buildKeyValueForPhp("a0", (plantColorId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Plant(_ji(arr.second, "0")  /* plants_id */ , _js(arr.second, "1")  /* plants_name */ , _ji(arr.second, "2")  /* plants_familyId */ , _ji(arr.second, "3")  /* plants_leafColorId */ , _ji(arr.second, "4")  /* plants_budColorId */ , _ji(arr.second, "5")  /* plants_height */ , _ji(arr.second, "6")  /* plants_leafTypeId */ , _ji(arr.second, "7")  /* plants_carePlanId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantsByLeafTypeId(jwt : string, leafTypeId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantsByLeafTypeId") ], 
		buildKeyValueForPhp("a0", (leafTypeId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Plant(_ji(arr.second, "0")  /* plants_id */ , _js(arr.second, "1")  /* plants_name */ , _ji(arr.second, "2")  /* plants_familyId */ , _ji(arr.second, "3")  /* plants_leafColorId */ , _ji(arr.second, "4")  /* plants_budColorId */ , _ji(arr.second, "5")  /* plants_height */ , _ji(arr.second, "6")  /* plants_leafTypeId */ , _ji(arr.second, "7")  /* plants_carePlanId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

loadPlantsByCarePlanId(jwt : string, carePlanId : int, onOK : ([Plant]) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "loadPlantsByCarePlanId") ], 
		buildKeyValueForPhp("a0", (carePlanId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(
					map(_ja(0), \arr -> { Plant(_ji(arr.second, "0")  /* plants_id */ , _js(arr.second, "1")  /* plants_name */ , _ji(arr.second, "2")  /* plants_familyId */ , _ji(arr.second, "3")  /* plants_leafColorId */ , _ji(arr.second, "4")  /* plants_budColorId */ , _ji(arr.second, "5")  /* plants_height */ , _ji(arr.second, "6")  /* plants_leafTypeId */ , _ji(arr.second, "7")  /* plants_carePlanId */ ); })
				);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

insertPlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "insertPlant") ], 
		buildKeyValueForPhp("a0", (val.name)),
		buildKeyValueForPhp("a1", (val.familyId)),
		buildKeyValueForPhp("a2", (val.leafColorId)),
		buildKeyValueForPhp("a3", (val.budColorId)),
		buildKeyValueForPhp("a4", (val.height)),
		buildKeyValueForPhp("a5", (val.leafTypeId)),
		buildKeyValueForPhp("a6", (val.carePlanId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 2) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else if (({ f = _jj(1); f == JsonNull() || f == JsonObject([]) })) { 
				onError("Missing"); 
			} else {
				onOK(_ji(_j0(1), "0")  /* id */ );
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}


updatePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "updatePlant") ], 
		buildKeyValueForPhp("a0", (val.id)),
		buildKeyValueForPhp("a1", (val.name)),
		buildKeyValueForPhp("a2", (val.familyId)),
		buildKeyValueForPhp("a3", (val.leafColorId)),
		buildKeyValueForPhp("a4", (val.budColorId)),
		buildKeyValueForPhp("a5", (val.height)),
		buildKeyValueForPhp("a6", (val.leafTypeId)),
		buildKeyValueForPhp("a7", (val.carePlanId)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

deletePlant(jwt : string, val : Plant, onOK : (int) -> void, onError : (string) -> void) -> void {
	REQUESTPAR = [KeyValue("jwt", jwt)];
	oauthDatawarpRequest("/php/plantkeeper_database.php", true, [], concatA([
		[ KeyValue("operation", "deletePlant") ], 
		buildKeyValueForPhp("a0", (val.id)),
		REQUESTPAR
	]), \result -> {
		if (startsWith(result, "OK\n")) {
			json = parseJson(strRight(result, 3));
			jsonData = getJsonObjectValue(json, []);

			_jj = \ ix -> getJsonFieldValue(json, i2s(ix), JsonNull());
			_ja = \ ix -> getJsonObjectValue(_jj(ix), []);
			_j0 = \ ix -> { v = _ja(ix); if (v == []) JsonNull() else v[0].second; }
			_jb = \ arr, n -> getJsonBoolField(arr, n, false);
			_ji = \ arr, n -> getJsonIntField(arr, n, 0);
			_js = \ arr, n -> getJsonStringField(arr, n, "");
			_jd = \ arr, n -> getJsonDoubleField(arr, n, 0.0);

			_jbM = \ arr, n -> getJsonMaybeField(arr, getJsonBoolValue, n, false);
			_jiM = \ arr, n -> getJsonMaybeField(arr, getJsonIntValue, n, 0);
			_jsM = \ arr, n -> getJsonMaybeField(arr, getJsonStringValue, n, "");
			_jdM = \ arr, n -> getJsonMaybeField(arr, getJsonDoubleValue, n, 0.0);

			if (length(jsonData) < 1) {
				onError("Returned JSON doesn't contain enough data arrays.");
			} else {
				onOK(1);
			}
		} else {
			onError(result)
		}
	}, onError, nop1);
}

